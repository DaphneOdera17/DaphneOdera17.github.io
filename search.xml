<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cs61C | lecture2</title>
      <link href="/post/55c67e63.html"/>
      <url>/post/55c67e63.html</url>
      
        <content type="html"><![CDATA[<h1 id="cs61C-lecture2"><a href="#cs61C-lecture2" class="headerlink" title="cs61C | lecture2"></a>cs61C | lecture2</h1><p>C 语言是一种编译语言。C 编译器将 C 程序映射到特定与体系结构的机器代码(实际上是一串 0 和 1)。<br>而 Java 会通过 JVM(Java 虚拟机) 将代码转换为独立于架构的字节码。<br>Python 则会直接解释代码。C 不会直接解释代码，而是将其编译成机器代码之后，CPU 直接解释并运行。</p><h2 id="编译优点"><a href="#编译优点" class="headerlink" title="编译优点"></a>编译优点</h2><p>C 的编译优势在于：<br>1.有很出色的运行性能，通常比 Python 和 Java 快。<br>2.编译的时候可以允许我们仅重新编译修改了的文件。</p><h2 id="编译缺点"><a href="#编译缺点" class="headerlink" title="编译缺点"></a>编译缺点</h2><p>1.编译文件包括可执行文件是特定于体系结构的，也就是特定于 CPU 类型和操作系统类型。<br>2.编译过程通常是 编辑、编译、运行 的重复</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>C 是一种弱类型语言。</p><h2 id="结构对齐与填充"><a href="#结构对齐与填充" class="headerlink" title="结构对齐与填充"></a>结构对齐与填充</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> &#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">c</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码在 32 位架构上：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">字节</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">unused bytes</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">sizeof(struct foo)</td><td style="text-align:center">12</td></tr></tbody></table></div><p>32 位计算机上的指针是 32 位，也就是 4 字节。</p><h2 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h2><p>union 可以让元素共享存储空间。同时会占用空间最大的元素提供了充足的空间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./foo hello 87</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>argv[0]</td><td>“./foo”</td></tr><tr><td>argv[1]</td><td>“hello”</td></tr><tr><td>argv[2]</td><td>“87”</td></tr><tr><td>argv[3]</td><td>null</td></tr></tbody></table></div><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>将内存视为一个很大的数组，每个元素有个地址并且存储这一定的值。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240531232124.png" alt=""><br>上图中，p 为指针，指向 x，所以要存储 x 的地址 104<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240531232222.png" alt=""><br>传统在函数中传递参数是通过复制参数的方式，不会对原始变量进行改变。但通过传递引用的方式可以进行修改。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">addOne</span><span class="params">(<span class="type">int</span> *p)</span> &#123;</span><br><span class="line">*p = *p + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> y = <span class="number">3</span>;</span><br><span class="line">addOne(&amp;y); <span class="comment">/* y 将变成 4 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> cs61C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs61C </tag>
            
            <tag> 体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs61C | lecture1</title>
      <link href="/post/cccf2fd9.html"/>
      <url>/post/cccf2fd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="cs61C-lecture1"><a href="#cs61C-lecture1" class="headerlink" title="cs61C | lecture1"></a>cs61C | lecture1</h1><h2 id="计算机系统抽象"><a href="#计算机系统抽象" class="headerlink" title="计算机系统抽象"></a>计算机系统抽象</h2><h2 id="二进制可以表示任何东西"><a href="#二进制可以表示任何东西" class="headerlink" title="二进制可以表示任何东西"></a>二进制可以表示任何东西</h2><p>n 位数字(base B) 可以表示 &lt;= $B^n$ 个事物</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>计算机中，用二进制表示数字</p><script type="math/tex; mode=display">\begin{aligned}& d_{n-1}d_{n-2}...d_1d_0(n位数字由B为基) \\=& ~~d_{n-1} \times B^{n-1} + d_{n-2} \times B^{n-2} + .. d_1 \times B^1 + d_0 \times B^0\end{aligned}</script><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>26 个字符用 5 bits 可以表示<br>ASCII: 7 bits</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>0 -&gt; False<br>1 -&gt; True</p><h3 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h3><script type="math/tex; mode=display">\begin{aligned}x &= 0b1010 \\& = 2^3 + 2^1 = 10\end{aligned}</script><h3 id="sign-and-magnitude"><a href="#sign-and-magnitude" class="headerlink" title="sign and magnitude"></a>sign and magnitude</h3><p>将第一位作为符号，剩下的作为无符号数。</p><script type="math/tex; mode=display">\begin{aligned}\textcolor{red}{0}00_{two} &= \textcolor{red}{+}0_{ten} \\\textcolor{red}{0}01_{two} &= \textcolor{red}{+}1_{ten} \\\textcolor{red}{0}10_{two} &= \textcolor{red}{+}2_{ten} \\\textcolor{red}{0}11_{two} &= \textcolor{red}{+}3_{ten} \\\\\textcolor{blue}{1}00_{two} &= \textcolor{blue}{-}0_{ten} \\\textcolor{blue}{1}01_{two} &= \textcolor{blue}{-}1_{ten} \\\textcolor{blue}{1}10_{two} &= \textcolor{blue}{-}2_{ten} \\\textcolor{blue}{1}11_{two} &= \textcolor{blue}{-}3_{ten} \\\end{aligned}</script><p>这样就会导致存在两个 0，$0…0_{two}~and~10…0_{two} = \pm 0_{ten}$<br>最大的正数 $01…1_{two}= (2^{(n-1)}-1)_{ten}$<br>最小的负数 $1…1_{two}=-(2^{(n-1)} - 1)_{ten}$</p><script type="math/tex; mode=display">\begin{aligned}x &= 0b1010 \\& = -1 \times 2^1 = -2\end{aligned}</script><h3 id="biased-notation"><a href="#biased-notation" class="headerlink" title="biased notation"></a>biased notation</h3><p>类似于 unsigned，但是会有偏移从而让 0 粗略的在中间。值 = “unsigned value” - bias<br>传统偏移量 $(2^{(n-1)} - 1)$</p><script type="math/tex; mode=display">\begin{aligned}000_{two} &= -3_{ten} \\001_{two} &= -2_{ten} \\010_{two} &= -1_{ten} \\\textcolor{red}{011_{two}} &\textcolor{red}{= 0_{ten}} \\100_{two} &= +1_{ten} \\101_{two} &= +2_{ten} \\110_{two} &= +3_{ten} \\111_{two} &= +4_{ten} \\\end{aligned}</script><p>此时，0 为 $01…1_{two}=0_{ten}$<br>最大的正数 $1…1_{two} = (2^{(n-1)})_{ten}$<br>最小的负数 $0…0_{two}=-(2^{(n-1)} - 1)_{ten}$</p><script type="math/tex; mode=display">\begin{aligned}x &= 0b1010 \\& = 2^3 + 2^1 - (2^3 - 1) = 3\end{aligned}</script><h3 id="one’s-complement"><a href="#one’s-complement" class="headerlink" title="one’s complement"></a>one’s complement</h3><script type="math/tex; mode=display">\begin{aligned}000_{two} &= +0_{ten} \\001_{two} &= +1_{ten} \\010_{two} &= +2_{ten} \\011_{two} &= +3_{ten} \\\\100_{two} &= -3_{ten} \\101_{two} &= -2_{ten} \\110_{two} &= -1_{ten} \\111_{two} &= -0_{ten} \\\end{aligned}</script><p>然而此时 0 有两个 $0…0_{two}~and~1…1_{two} = \pm0_{ten}$<br>最大的正数 $01…1_{two} = (2^{(n-1)}-1)_{ten}$<br>最小的负数 $10…0_{two} = -(2^{(n-1)}-1)_{ten}$</p><script type="math/tex; mode=display">\begin{aligned}x &= 0b1010 \\-x& = \sim x = 0b0101 = 5 \\ x &= -5\end{aligned}</script><h3 id="two’s-complement"><a href="#two’s-complement" class="headerlink" title="two’s complement"></a>two’s complement</h3><script type="math/tex; mode=display">\begin{aligned}000_{two} &= +0_{ten} \\001_{two} &= +1_{ten} \\010_{two} &= +2_{ten} \\011_{two} &= +3_{ten} \\\\100_{two} &= -4_{ten} \\101_{two} &= -3_{ten} \\110_{two} &= -2_{ten} \\111_{two} &= -1_{ten} \\\end{aligned}</script><p>对于 0，只有 $0…0_{two} = 0_{ten}$<br>最大的正数 $01…1_{two} = (2^{(n-1)} - 1)_{ten}$<br>最小的负数 $10…0_{two}=(-2^{(n-1)})_{ten}$</p><p>正数翻转所有位并加 1 可以得到负数。</p><script type="math/tex; mode=display">\begin{aligned}x &= 0b1010 \\-x& = \sim x + 1= 0b0101 + 1  = 0b0110 = 6 \\ x & = -6 \\ & = -2^3 + 2^1 = -8 + 2 = -6\end{aligned}</script><p>对于补码来说</p><div class="table-container"><table><thead><tr><th style="text-align:center">会溢出</th><th style="text-align:center">不会溢出</th></tr></thead><tbody><tr><td style="text-align:center">+ + +</td><td style="text-align:center">- + +</td></tr><tr><td style="text-align:center">- + -</td><td style="text-align:center">+ + -</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> cs61C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs61C </tag>
            
            <tag> 体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux | 安装并配置 Ubuntu 22.04 LTS</title>
      <link href="/post/b5141e1c.html"/>
      <url>/post/b5141e1c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-安装并配置-Ubuntu-22-04-LTS"><a href="#Linux-安装并配置-Ubuntu-22-04-LTS" class="headerlink" title="Linux | 安装并配置 Ubuntu 22.04 LTS"></a>Linux | 安装并配置 Ubuntu 22.04 LTS</h1><p>笔者采用的是 VMware Workstation 软件。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h2 id="VMware-Workstation-软件"><a href="#VMware-Workstation-软件" class="headerlink" title="VMware Workstation 软件"></a>VMware Workstation 软件</h2><p><a href="https://www.vmware.com/products/workstation-pro.html">官方下载网址</a><br>该软件似乎是需要破解的，请读者自行解决。</p><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><p><a href="https://ubuntu.com/desktop?gad_source=1&amp;gclid=CjwKCAjw57exBhAsEiwAaIxaZsMPkLdcWOm7d0kcc6l1SEcZdaj86yHpSRbbqQ-3MLEWqbyIc0kIERoCipcQAvD_BwE">Ubuntu 官网</a><br>点击并下载镜像。<br>笔者用的是 22.04 版本的镜像，当然也可以选择最新版。安装步骤应该差不多。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240428205949.png" style="zoom: 25%;" /></p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202202.png" style="zoom: 50%;" /><br>勾选稍后安装操作系统<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202243.png" style="zoom: 50%;" /><br>版本选择 Ubuntu 64位<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202336.png" style="zoom:50%;" /><br>名称和位置根据自己偏好设置<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202446.png" style="zoom:50%;" /><br>处理器根据自己电脑情况来，后续也可以进行调整<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202521.png" style="zoom: 50%;" /><br>内存默认 4GB，也可以调整<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202559.png" style="zoom:50%;" /><br>选择 网络地址转换(NAT)<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202645.png" style="zoom:50%;" /></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202710.png" style="zoom:50%;" /></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202722.png" style="zoom:50%;" /></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202735.png" style="zoom:50%;" /><br>个人认为磁盘大小 50GB 比较合理<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202851.png" style="zoom:50%;" /><br>磁盘文件根据给出的来就行<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202931.png" style="zoom:50%;" /></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427202945.png" style="zoom:50%;" /></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427203112.png" style="zoom:33%;" /></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427203144.png" style="zoom:50%;" /><br>找到你 iso 的下载路径<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427203222.png" style="zoom:50%;" /><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427203233.png" alt=""><br>设置完成后打开虚拟机<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427203254.png" alt=""><br>选择第一个并回车（或者等待它自动跳转）<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427203345.png" style="zoom: 67%;" /><br>语言自行选择，尽量选英文<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427204626.png" style="zoom: 50%;" /><br>选择键盘布局<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427204704.png" style="zoom: 67%;" /><br>选择正常安装即可<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427204740.png" style="zoom: 67%;" /><br>选择清空整个磁盘文件并安装系统<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427204835.png" style="zoom:67%;" /><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427204903.png" alt=""><br>地区选在上海<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427205007.png" style="zoom:50%;" /><br>自行配置名字和密码。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427205108.png" style="zoom:67%;" /><br>安装完成后选择重启<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427211442.png" style="zoom: 67%;" /></p><h4 id="Please-remove-the-installation-medium-then-reboot"><a href="#Please-remove-the-installation-medium-then-reboot" class="headerlink" title="Please remove the installation medium, then reboot"></a>Please remove the installation medium, then reboot</h4><p>重启的时候如果停留在一个界面显示要移除安装介质并且按下 Enter 的，<strong>直接按 Enter</strong> 就行（笔者忘记截图了）。<br>输入密码进入系统。</p><h2 id="更新镜像源"><a href="#更新镜像源" class="headerlink" title="更新镜像源"></a>更新镜像源</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427212347.png" style="zoom:50%;" /><br>找到 Terminal 并打开<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427212605.png" style="zoom:50%;" /><br>进入终端界面后，我们先安装 Vim 文本编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><p>提示输入密码，输入并回车（此时输入密码是不显示出来的）<br>安装完成后输入以下指令备份一份存储镜像源的文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/apt</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><br>替换镜像：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><br>在 vim 文本编辑器中，我们在默认模式下，按下： gg（也就是连按两下 g），跳到行首，然后按下 dG(先按下小写 d, 再按大写 G)。即可清空文本。<br>然后我们复制进去（可以通过右键找到粘贴）<br>下面是阿里源，当然你也可以用清华源、中科大源等，别的请自行百度。我们以阿里源作为示范：<br><a href="https://midoq.github.io/2022/05/30/Ubuntu20-04%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/">其它镜像源</a><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># deb https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><br>再按下 :wq (先按下 冒号键:, 再输入 wq) 即可保存。<br>然后更新(需要进入漫长的等待):<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p><h2 id="更改终端字体、界面"><a href="#更改终端字体、界面" class="headerlink" title="更改终端字体、界面"></a>更改终端字体、界面</h2><h3 id="更改字体大小"><a href="#更改字体大小" class="headerlink" title="更改字体大小"></a>更改字体大小</h3><p>我们会发现终端的字体太小了。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427214123.png" alt=""><br>找到 Preference<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427214156.png" alt=""><br>在 Profiles 下的 Unnamed<br>勾选 Custom font:<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427214240.png" alt=""><br>调整字体大小<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427214332.png" style="zoom:67%;" /></p><h3 id="更改终端大小"><a href="#更改终端大小" class="headerlink" title="更改终端大小"></a>更改终端大小</h3><p>更改 columns 和 rows 即可（需要重启终端才可生效）<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427214431.png" style="zoom:67%;" /></p><h2 id="安装必须工具"><a href="#安装必须工具" class="headerlink" title="安装必须工具"></a>安装必须工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure><p>安装的时候可能会提示：Do you want to continue? 记得输入 Y 然后回车。<br>安装完成后，g++、gcc、make 等都已安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></p><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><h3 id="安装中文语言包"><a href="#安装中文语言包" class="headerlink" title="安装中文语言包"></a>安装中文语言包</h3><p>先在终端输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove thunderbird</span><br><span class="line">sudo apt-get install language-pack-zh-han*</span><br></pre></td></tr></table></figure><br>打开设置进入 Region &amp; Language。选择 Manage installed Languages。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524225230.png" style="zoom:50%;" /><br>不过会出现此报错，忽略即可。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524225505.png" style="zoom:50%;" /><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524225608.png" style="zoom: 67%;" /><br>找到 Chinese 双击选择并应用。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524225641.png" style="zoom:67%;" /><br>等待系统安装完中文语言包，我们进入下个阶段。</p><h3 id="安装中文输入法-1"><a href="#安装中文输入法-1" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><p>先在终端输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ibus-pinyin</span><br></pre></td></tr></table></figure><br>进入设置。</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524224319.png" style="zoom:50%;" /></p><p>选择 Chinese</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524224343.png" alt=""><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524225816.png" style="zoom:67%;" /><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240524225832.png" style="zoom:67%;" /><br><strong>$\textcolor{red}{添加后记得重启，否则可能无效!!!}$</strong><br>之后即可正常使用中文输入法。<br>按 win + 空格键 可以切换中英文输入法。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware | 虚拟机开启摄像头</title>
      <link href="/post/f4ee2029.html"/>
      <url>/post/f4ee2029.html</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-虚拟机开启摄像头"><a href="#VMware-虚拟机开启摄像头" class="headerlink" title="VMware | 虚拟机开启摄像头"></a>VMware | 虚拟机开启摄像头</h1><h2 id="打开主机摄像头功能"><a href="#打开主机摄像头功能" class="headerlink" title="打开主机摄像头功能"></a>打开主机摄像头功能</h2><p>首先请确保主机摄像头打开。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503135417.png" alt=""><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503135447.png" alt=""><br>若图像显示正常则可以。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503135529.png" alt=""></p><h2 id="确保主机虚拟机USB服务开启"><a href="#确保主机虚拟机USB服务开启" class="headerlink" title="确保主机虚拟机USB服务开启"></a>确保主机虚拟机USB服务开启</h2><p>进入系统服务界面，确保 VMware USB … 处于开启状态，如果没开启，将它打开。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503140104.png" alt=""></p><h2 id="开启虚拟机摄像头"><a href="#开启虚拟机摄像头" class="headerlink" title="开启虚拟机摄像头"></a>开启虚拟机摄像头</h2><p>在 VMware Workstation 软件中<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503135638.png" alt=""><br>点击上方虚拟机，进入设置界面。<br>将 USB 控制器的 USB 改为 3.1<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503135712.png" alt=""><br>再进入虚拟机选项的可移动设备选项，找到 Camera 并点击连接<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/23a764af58d620aa58e6fb01b080c79.jpg" alt="23a764af58d620aa58e6fb01b080c79.jpg"><br>之后就可以打开虚拟机摄像头了。<br>如果要关闭，再点击上图的选项，进行断开。</p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV | 入门 | 基本操作</title>
      <link href="/post/5dd3bd60.html"/>
      <url>/post/5dd3bd60.html</url>
      
        <content type="html"><![CDATA[<h1 id="OpenCV-入门"><a href="#OpenCV-入门" class="headerlink" title="OpenCV | 入门"></a>OpenCV | 入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.samontab.com/web/2023/02/installing-opencv-4-7-0-in-ubuntu-22-04-lts/">参考教程</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>$VGA = 640 \times 480$<br>$HD = 1280 \times 720$<br>$FHD = 1920 \times 1080$<br>$4K = 3840 \times 2160$<br>这些都表示了固定的像素，例如 VGA，代表在宽度上 640 像素(px)，在高度上 480 像素。我们可以把这些像素看成一个一个框。<br>对于黑白图像 Binary Image, 用 0 代表黑色，用 1 代表白色。</p><p>对于 8 位，可以表示 $2^8 = 256$ 个级别，也就是 0 ~ 255。一个灰度图像(Gray Scale Image) 也就是 8 Bit or 256 Level 的。<br><a href="https://blog.csdn.net/ColdWindHA/article/details/82080176">OpenCV学习笔记——HSV颜色空间超极详解&amp;inRange函数用法及实战</a></p><h2 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h2><p>图片与代码放在同个目录下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Importing Images */</span></span><br><span class="line">    string path = <span class="string">&quot;../dog.jpeg&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240429234108.png" alt=""></p><h2 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;../Megamind.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(path)</span></span>;</span><br><span class="line"></span><br><span class="line">    Mat img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cap.<span class="built_in">read</span>(img);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">3</span>); <span class="comment">// 添加延时</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240504144246.png" alt=""></p><h2 id="将图片转换为灰度图像"><a href="#将图片转换为灰度图像" class="headerlink" title="将图片转换为灰度图像"></a>将图片转换为灰度图像</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string path = <span class="string">&quot;../dog.jpeg&quot;</span>;</span><br><span class="line">Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">Mat imgGray;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 转换图像颜色 */</span></span><br><span class="line"><span class="built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Gray&quot;</span>, imgGray);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240429234218.png" alt=""></p><h2 id="模糊图像"><a href="#模糊图像" class="headerlink" title="模糊图像"></a>模糊图像</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat imgBlur;</span><br><span class="line"><span class="built_in">GaussianBlur</span>(img, imgBlur, <span class="built_in">Size</span>(<span class="number">7</span>, <span class="number">7</span>), <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Blur&quot;</span>, imgBlur);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430234718.png" alt=""></p><h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat imgCanny;</span><br><span class="line"><span class="built_in">Canny</span>(imgBlur, imgCanny, <span class="number">50</span>, <span class="number">150</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Canny&quot;</span>, imgCanny);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430235045.png" alt=""><br>对于 Canny 函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cv::Canny</span><span class="params">(InputArray image, OutputArray edges, <span class="type">double</span> lowThreshold, <span class="type">double</span> highThreshold, <span class="type">int</span> apertureSize = <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">image：输入图像，应该是灰度图像。 </span></span><br><span class="line"><span class="comment">edges：输出图像，即检测到的边缘图像。 </span></span><br><span class="line"><span class="comment">lowThreshold：低阈值，用于双阈值检测。 </span></span><br><span class="line"><span class="comment">highThreshold：高阈值，用于双阈值检测。 </span></span><br><span class="line"><span class="comment">apertureSize：指定Sobel算子的大小，默认为3。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="图像膨胀"><a href="#图像膨胀" class="headerlink" title="图像膨胀"></a>图像膨胀</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mat imgDil;</span><br><span class="line">Mat kernel = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">dilate</span>(imgCanny, imgDil, kernel);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Dilate&quot;</span>, imgDil);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501001136.png" alt=""><br>getStructuringElement 函数返回一个结构元素(卷积核)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Mat kernel = cv2.<span class="built_in">getStructuringElement</span>(a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a 设定卷积核的形状，不同卷积核(形状、大小)对图形的腐蚀、膨胀操作效果不同。</span></span><br><span class="line"><span class="comment">MORPH_RECT(函数返回矩形卷积核)  </span></span><br><span class="line"><span class="comment">MORPH_CROSS(函数返回十字形卷积核)  </span></span><br><span class="line"><span class="comment">MORPH_ELLIPSE(函数返回椭圆形卷积核)</span></span><br><span class="line"><span class="comment">b 设定卷积核的大小</span></span><br><span class="line"><span class="comment">用 (x, y) 表示，表示卷积核有 x 行 y 列。</span></span><br><span class="line"><span class="comment">c 表示描点的位置，一般 c = 1，表示位于中心。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="图像腐蚀"><a href="#图像腐蚀" class="headerlink" title="图像腐蚀"></a>图像腐蚀</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat imgErode;</span><br><span class="line"><span class="built_in">erode</span>(imgDil, imgErode, kernel);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Erode&quot;</span>, imgErode);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501001203.png" alt=""></p><h2 id="调整图片大小"><a href="#调整图片大小" class="headerlink" title="调整图片大小"></a>调整图片大小</h2><p>输出图片的尺寸<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; img.<span class="built_in">size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501003218.png" alt=""><br>对其进行增大<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat imgResize;</span><br><span class="line"></span><br><span class="line"><span class="built_in">resize</span>(img, imgResize, <span class="built_in">Size</span>(<span class="number">640</span>, <span class="number">480</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Resize&quot;</span>, imgResize);</span><br></pre></td></tr></table></figure></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501003150.png" alt=""><br>如果使用比例进行缩小，缩小到 二分之一<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">resize</span>(img, imgResize, <span class="built_in">Size</span>(), <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501003430.png" alt=""></p><h2 id="裁剪图片"><a href="#裁剪图片" class="headerlink" title="裁剪图片"></a>裁剪图片</h2><p>用 Rect 裁剪一块矩形<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mat imgCrop;</span><br><span class="line"></span><br><span class="line"><span class="function">Rect <span class="title">roi</span><span class="params">(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span></span>; <span class="comment">// x 坐标 y 坐标 宽度 高度</span></span><br><span class="line">imgCrop = <span class="built_in">img</span>(roi);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Crop&quot;</span>, imgCrop);</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501201246.png" alt=""></p><h2 id="创建图片"><a href="#创建图片" class="headerlink" title="创建图片"></a>创建图片</h2><p>创建一张蓝色的图片<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mat <span class="title">img</span><span class="params">(<span class="number">512</span>, <span class="number">512</span>, CV_8UC3, Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501202723.png" alt=""></p><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="绘制圆圈"><a href="#绘制圆圈" class="headerlink" title="绘制圆圈"></a>绘制圆圈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// White Image</span></span><br><span class="line"><span class="function">Mat <span class="title">img</span><span class="params">(<span class="number">512</span>, <span class="number">512</span>, CV_8UC3, Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">circle</span>(img, <span class="built_in">Point</span>(<span class="number">256</span>, <span class="number">256</span>), <span class="number">155</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501203050.png" alt=""></p><h4 id="增加圆圈的厚度"><a href="#增加圆圈的厚度" class="headerlink" title="增加圆圈的厚度"></a>增加圆圈的厚度</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">circle</span>(img, <span class="built_in">Point</span>(<span class="number">256</span>, <span class="number">256</span>), <span class="number">155</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>), <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501203251.png" alt=""></p><h4 id="填满圆圈"><a href="#填满圆圈" class="headerlink" title="填满圆圈"></a>填满圆圈</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">circle</span>(img, <span class="built_in">Point</span>(<span class="number">256</span>, <span class="number">256</span>), <span class="number">155</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>), FILLED);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501203400.png" alt=""></p><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rectangle</span>(img, <span class="built_in">Point</span>(<span class="number">130</span>, <span class="number">226</span>), <span class="built_in">Point</span>(<span class="number">382</span>, <span class="number">286</span>), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 两个 Point 分别代表矩形左上角坐标和右下角坐标</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501203538.png" alt=""></p><h4 id="将矩形填满"><a href="#将矩形填满" class="headerlink" title="将矩形填满"></a>将矩形填满</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rectangle</span>(img, <span class="built_in">Point</span>(<span class="number">130</span>, <span class="number">226</span>), <span class="built_in">Point</span>(<span class="number">382</span>, <span class="number">286</span>), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), FILLED);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501203838.png" alt=""></p><h3 id="绘制一条线"><a href="#绘制一条线" class="headerlink" title="绘制一条线"></a>绘制一条线</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">line</span>(img, <span class="built_in">Point</span>(<span class="number">130</span>, <span class="number">296</span>), <span class="built_in">Point</span>(<span class="number">382</span>, <span class="number">296</span>), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501204020.png" alt=""></p><h3 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">putText</span>(img, <span class="string">&quot;Birdy&#x27;s Workshop&quot;</span>, <span class="built_in">Point</span>(<span class="number">137</span>, <span class="number">262</span>), FONT_HERSHEY_DUPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501204315.png" alt=""></p><h4 id="给文字添加厚度"><a href="#给文字添加厚度" class="headerlink" title="给文字添加厚度"></a>给文字添加厚度</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">putText</span>(img, <span class="string">&quot;Birdy&#x27;s Workshop&quot;</span>, <span class="built_in">Point</span>(<span class="number">137</span>, <span class="number">262</span>), FONT_HERSHEY_DUPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501204423.png" alt=""></p><h2 id="Warp-images"><a href="#Warp-images" class="headerlink" title="Warp images"></a>Warp images</h2><p>原图像：<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501214840.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    string path = <span class="string">&quot;../image/cards.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> w = <span class="number">250</span>, h = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat matrix, imgWarp;</span><br><span class="line"></span><br><span class="line">    Point2f src[<span class="number">4</span>] = &#123;&#123;<span class="number">529</span>, <span class="number">142</span>&#125;, &#123;<span class="number">779</span>, <span class="number">190</span>&#125;, &#123;<span class="number">405</span>, <span class="number">395</span>&#125;, &#123;<span class="number">674</span>, <span class="number">457</span>&#125;&#125;;</span><br><span class="line">    Point2f dst[<span class="number">4</span>] = &#123;&#123;<span class="number">0.0f</span>, <span class="number">0.0f</span>&#125;, &#123;w, <span class="number">0.0f</span>&#125;, &#123;<span class="number">0.0f</span>, h&#125;, &#123;w, h&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    matrix = <span class="built_in">getPerspectiveTransform</span>(src, dst);</span><br><span class="line">    <span class="built_in">warpPerspective</span>(img, imgWarp, matrix, <span class="built_in">Point</span>(w, h));</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image Warp&quot;</span>, imgWarp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501223257.png" alt=""></p><h3 id="圈出选中的四个角"><a href="#圈出选中的四个角" class="headerlink" title="圈出选中的四个角"></a>圈出选中的四个角</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">circle</span>(img, src[i], <span class="number">10</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), FILLED);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501223602.png" alt=""></p><h2 id="颜色检测"><a href="#颜色检测" class="headerlink" title="颜色检测"></a>颜色检测</h2><p>原图像<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501230105.png" alt=""></p><h3 id="HSV-颜色系统"><a href="#HSV-颜色系统" class="headerlink" title="HSV 颜色系统"></a>HSV 颜色系统</h3><p>Hue 色相<br>Saturation 饱和度<br>Value 色调、纯度</p><h3 id="转换-HSV"><a href="#转换-HSV" class="headerlink" title="转换 HSV"></a>转换 HSV</h3><p>将图像转换为 hsv 空间可以更容易识别颜色。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat imgHSV;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cvtColor</span>(img, imgHSV, COLOR_BGR2HSV);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image HSV&quot;</span>, imgHSV);</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501230926.png" alt=""></p><h3 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mat mask;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hmin = <span class="number">0</span>, smin = <span class="number">110</span>, vmin = <span class="number">153</span>;</span><br><span class="line"><span class="type">int</span> hmax = <span class="number">19</span>, smax= <span class="number">240</span>, vmax = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">lower</span><span class="params">(hmin, smin, vmin)</span></span>;</span><br><span class="line"><span class="function">Scalar <span class="title">upper</span><span class="params">(hmax, smax, vmax)</span></span>;</span><br><span class="line"><span class="built_in">inRange</span>(imgHSV, lower, upper, mask);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Image Mask&quot;</span>, mask);</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501233821.png" alt=""><br>上述代码中的 hmin、smin、vim … 一系列的值如果通过每次手动修改去找到适合的就会非常麻烦。可以通过创建轨道的方式进行动态修改。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;../image/lambo.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgHSV, mask;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgHSV, COLOR_BGR2HSV);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hmin = <span class="number">0</span>, smin = <span class="number">110</span>, vmin = <span class="number">153</span>;</span><br><span class="line">    <span class="type">int</span> hmax = <span class="number">19</span>, smax= <span class="number">240</span>, vmax = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">namedWindow</span>(<span class="string">&quot;Trackbars&quot;</span>, (<span class="number">640</span>, <span class="number">200</span>));</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Hue Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;hmin, <span class="number">179</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Hue Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;hmax, <span class="number">179</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Sat Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;smin, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Sat Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;smax, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Val Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;vmin, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Val Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;vmax, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Scalar <span class="title">lower</span><span class="params">(hmin, smin, vmin)</span></span>;</span><br><span class="line">        <span class="function">Scalar <span class="title">upper</span><span class="params">(hmax, smax, vmax)</span></span>;</span><br><span class="line">        <span class="built_in">inRange</span>(imgHSV, lower, upper, mask);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image HSV&quot;</span>, imgHSV);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image Mask&quot;</span>, mask);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501235125.png" alt=""><br>调节之后：<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501235857.png" alt=""><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502000120.png" alt=""></p><h3 id="检测不同颜色物体"><a href="#检测不同颜色物体" class="headerlink" title="检测不同颜色物体"></a>检测不同颜色物体</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;../image/shapes.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgHSV, mask;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hmin = <span class="number">0</span>, smin = <span class="number">0</span>, vmin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> hmax = <span class="number">179</span>, smax= <span class="number">255</span>, vmax = <span class="number">255</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgHSV, COLOR_BGR2HSV);</span><br><span class="line">    <span class="built_in">namedWindow</span>(<span class="string">&quot;Trackbars&quot;</span>, (<span class="number">640</span>, <span class="number">200</span>));</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Hue Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;hmin, <span class="number">179</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Hue Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;hmax, <span class="number">179</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Sat Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;smin, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Sat Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;smax, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Val Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;vmin, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Val Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;vmax, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Scalar <span class="title">lower</span><span class="params">(hmin, smin, vmin)</span></span>;</span><br><span class="line">        <span class="function">Scalar <span class="title">upper</span><span class="params">(hmax, smax, vmax)</span></span>;</span><br><span class="line">        <span class="built_in">inRange</span>(imgHSV, lower, upper, mask);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image HSV&quot;</span>, imgHSV);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image Mask&quot;</span>, mask);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502001137.png" alt=""><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502001201.png" alt=""></p><h2 id="检测轮廓、形状"><a href="#检测轮廓、形状" class="headerlink" title="检测轮廓、形状"></a>检测轮廓、形状</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;../image/shapes.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgGray, imgBlur, imgCanny, imgDil, imgErode; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(imgGray, imgBlur, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Canny</span>(imgBlur, imgCanny, <span class="number">25</span>, <span class="number">75</span>);</span><br><span class="line">    Mat kernel = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">dilate</span>(imgCanny, imgDil, kernel);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image Gray&quot;</span>, imgGray);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image Blur&quot;</span>, imgBlur);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image Canny&quot;</span>, imgCanny);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image Dil&quot;</span>, imgDil);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502201259.png" alt=""><br>当我们放大 ImgCanny 也就是边缘检测的图像，会发现三角形边有很明显的毛躁和缝隙。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502201417.png" alt=""><br>而放大膨胀后的图像，发现这些毛躁和缝隙变少，所以一般用膨胀后的图像来作为边缘检测的图像。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502201452.png" alt=""></p><h3 id="绘制轮廓"><a href="#绘制轮廓" class="headerlink" title="绘制轮廓"></a>绘制轮廓</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getContours</span><span class="params">(Mat imgDil, Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">    <span class="built_in">drawContours</span>(img, contours, <span class="number">-1</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;../image/shapes.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgGray, imgBlur, imgCanny, imgDil, imgErode; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Preprocessing</span></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(imgGray, imgBlur, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Canny</span>(imgBlur, imgCanny, <span class="number">25</span>, <span class="number">75</span>);</span><br><span class="line">    Mat kernel = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">dilate</span>(imgCanny, imgDil, kernel);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getContours</span>(imgDil, img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="comment">// imshow(&quot;Image Gray&quot;, imgGray);</span></span><br><span class="line">    <span class="comment">// imshow(&quot;Image Blur&quot;, imgBlur);</span></span><br><span class="line">    <span class="comment">// imshow(&quot;Image Canny&quot;, imgCanny);</span></span><br><span class="line">    <span class="comment">// imshow(&quot;Image Dil&quot;, imgDil);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502202255.png" alt=""><br>但是我们发现，小噪点也被勾勒了轮廓。<br>我们想去除这些噪点的轮廓。</p><p>打印每个图形面积<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> area = <span class="built_in">contourArea</span>(contours[i]);</span><br><span class="line">        cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>通过输出每个图形的面积，我们发现，噪点面积为 185.<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502212439.png" alt=""><br>我们可以简单设置如果面积在 1000 以上才回绘制轮廓<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getContours</span><span class="params">(Mat imgDil, Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line"><span class="comment">// drawContours(img, contours, i, Scalar(255, 0, 255), 2);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> area = <span class="built_in">contourArea</span>(contours[i]);</span><br><span class="line">        cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(area &gt; <span class="number">1000</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">drawContours</span>(img, contours, i, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现噪点没有被绘制轮廓。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502212607.png" alt=""></p><h3 id="图像轮廓点进行多边形拟合"><a href="#图像轮廓点进行多边形拟合" class="headerlink" title="图像轮廓点进行多边形拟合"></a>图像轮廓点进行多边形拟合</h3><p>approxPolyDP 函数主要功能是把一个连续光滑曲线折线化，对图像轮廓点进行多边形拟合。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getContours</span><span class="params">(Mat imgDil, Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; <span class="built_in">conPoly</span>(contours.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> area = <span class="built_in">contourArea</span>(contours[i]);</span><br><span class="line">        cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(area &gt; <span class="number">1000</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> peri = <span class="built_in">arcLength</span>(contours[i], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">approxPolyDP</span>(contours[i], conPoly[i], <span class="number">0.02</span> * peri, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">drawContours</span>(img, conPoly, i, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; conPoly[i].<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到它绘制了很多点，然后将它们连接，而不是绘制圆<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502213700.png" alt=""><br>输出每个图形点的个数：<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502213844.png" alt=""></p><h3 id="图形边界矩形"><a href="#图形边界矩形" class="headerlink" title="图形边界矩形"></a>图形边界矩形</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getContours</span><span class="params">(Mat imgDil, Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; <span class="built_in">conPoly</span>(contours.<span class="built_in">size</span>());</span><br><span class="line"><span class="function">vector&lt;Rect&gt; <span class="title">boundRect</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> area = <span class="built_in">contourArea</span>(contours[i]);</span><br><span class="line">        cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(area &gt; <span class="number">1000</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> peri = <span class="built_in">arcLength</span>(contours[i], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">approxPolyDP</span>(contours[i], conPoly[i], <span class="number">0.02</span> * peri, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">drawContours</span>(img, conPoly, i, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; conPoly[i].<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            boundRect[i] = <span class="built_in">boundingRect</span>(conPoly[i]);</span><br><span class="line">            <span class="built_in">rectangle</span>(img, boundRect[i].<span class="built_in">tl</span>(), boundRect[i].<span class="built_in">br</span>(), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502231243.png" alt=""></p><h3 id="输出形状名称"><a href="#输出形状名称" class="headerlink" title="输出形状名称"></a>输出形状名称</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getContours</span><span class="params">(Mat imgDil, Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; <span class="built_in">conPoly</span>(contours.<span class="built_in">size</span>());</span><br><span class="line"><span class="function">vector&lt;Rect&gt; <span class="title">boundRect</span><span class="params">(contours.size())</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> area = <span class="built_in">contourArea</span>(contours[i]);</span><br><span class="line">        cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        string objectType;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(area &gt; <span class="number">1000</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> peri = <span class="built_in">arcLength</span>(contours[i], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">approxPolyDP</span>(contours[i], conPoly[i], <span class="number">0.02</span> * peri, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">drawContours</span>(img, conPoly, i, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; conPoly[i].<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            boundRect[i] = <span class="built_in">boundingRect</span>(conPoly[i]);</span><br><span class="line">            <span class="built_in">rectangle</span>(img, boundRect[i].<span class="built_in">tl</span>(), boundRect[i].<span class="built_in">br</span>(), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="type">int</span> objCor = (<span class="type">int</span>)conPoly[i].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(objCor == <span class="number">3</span>) &#123;</span><br><span class="line">                objectType = <span class="string">&quot;Tri&quot;</span>; <span class="comment">// 如果点数为 3</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(objCor == <span class="number">4</span>) &#123;</span><br><span class="line">                objectType = <span class="string">&quot;Rect&quot;</span>; <span class="comment">// 点数为 4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                objectType = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">putText</span>(img, objectType, &#123;boundRect[i].x, boundRect[i].y - <span class="number">5</span>&#125;, FONT_HERSHEY_DUPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>)); <span class="comment">// 显示文本</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502231940.png" alt=""><br>但是上述代码知识简单将长方形和正方形都定义为矩形，那么该如何分辨长方形和正方形呢？<br>我们用宽高比来判断。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(objCor == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="comment">// objectType = &quot;Rect&quot;;</span></span><br><span class="line"><span class="type">float</span> aspRatio = (<span class="type">float</span>)boundRect[i].width / (<span class="type">float</span>)boundRect[i].height;</span><br><span class="line"><span class="keyword">if</span>(aspRatio &gt; <span class="number">0.95</span> &amp;&amp; aspRatio &lt; <span class="number">1.05</span>)</span><br><span class="line">objectType = <span class="string">&quot;Square&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">objectType = <span class="string">&quot;Rectangle&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502232808.png" alt=""><br><a href="https://blog.csdn.net/azs0504/article/details/119973808">OPENCV——C++版图像形状简单识别</a></p><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;../image/test.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line"></span><br><span class="line">    CascadeClassifier faceCascade;</span><br><span class="line">    faceCascade.<span class="built_in">load</span>(<span class="string">&quot;../haarcascade_frontalface_default.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(faceCascade.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;None!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    vector&lt;Rect&gt; faces;</span><br><span class="line">    faceCascade.<span class="built_in">detectMultiScale</span>(img, faces, <span class="number">1.1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">rectangle</span>(img, faces[i].<span class="built_in">tl</span>(), faces[i].<span class="built_in">br</span>(), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240502234538.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode | 修改首页启动页 Logo</title>
      <link href="/post/184dbe6a.html"/>
      <url>/post/184dbe6a.html</url>
      
        <content type="html"><![CDATA[<h1 id="VsCode-修改首页启动页-Logo"><a href="#VsCode-修改首页启动页-Logo" class="headerlink" title="VsCode | 修改首页启动页 Logo"></a>VsCode | 修改首页启动页 Logo</h1><h2 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503202114.png" alt=""></p><h2 id="插件的安装"><a href="#插件的安装" class="headerlink" title="插件的安装"></a>插件的安装</h2><p>先安装插件 Custom CSS and JS Loader<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503210221.png" alt=""></p><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>Ctrl + Shift + P 输入<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503210258.png" alt=""><br>打开用户设置，在末尾添加<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vscode_custom_css.imports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503210455.png" alt=""></p><h2 id="下载-Logo"><a href="#下载-Logo" class="headerlink" title="下载 Logo"></a>下载 Logo</h2><p>下载 Logo<br><a href="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/VSCode-Thick.png">点我下载</a></p><h2 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h2><p>创建一个文件夹 Vs_code_config，里面放入 user.css<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.editor-group-watermark &gt; .letterpress&#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&quot;https://raw.githubusercontent.com/Aikoyori/ProgrammingVTuberLogos/main/VSCode/VSCode-Thick.png&quot;</span>) !important;</span><br><span class="line">  opacity: <span class="number">.75</span>;</span><br><span class="line">  aspect-ratio: <span class="number">3</span>/<span class="number">2</span> !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是会因为网络原因可能加载不出来。所以我们可以通过将图片转换 base64 来进行访问。<br><a href="https://tool.chinaz.com/tools/imgtobase">base64编码在线转换网站</a><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503202202.png" alt=""><br>然后将这些编码粘贴到 url 里面，替换掉原先的网页链接并保存<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503210845.png" alt=""></p><h3 id="引入-css"><a href="#引入-css" class="headerlink" title="引入 css"></a>引入 css</h3><p>回到用户的 settings.json<br>将之前输入的改为，其中 file:/// 之后是你 user.css 存放的路径<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vscode_custom_css.imports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;file:///D:/VS_code_config/user.css&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></p><h2 id="让插件生效"><a href="#让插件生效" class="headerlink" title="让插件生效"></a>让插件生效</h2><p>Ctrl + Shift + P 输入 &gt;Enable…<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240503210126.png" alt=""><br>点击 Enable Custom CSS and JS<br>重启 VsCode 生效</p>]]></content>
      
      
      <categories>
          
          <category> VsCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> VsCode </tag>
            
            <tag> Logo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP | Floating Point</title>
      <link href="/post/e8b77b1.html"/>
      <url>/post/e8b77b1.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSAPP-Floating-Point"><a href="#CSAPP-Floating-Point" class="headerlink" title="CSAPP | Floating Point"></a>CSAPP | Floating Point</h1><p>$b_i$  $b_{i-1}$ … $b_2$ $b_1$ $b_0$ $b_{-1}$ $b_{-2}$ $b_{-3}$ … $b_{-j}$<br>$S=\sum_{k=-j}^{i}b_k\times2^k$</p><h2 id="IEEE-Standard-754"><a href="#IEEE-Standard-754" class="headerlink" title="IEEE Standard 754"></a>IEEE Standard 754</h2><h3 id="浮点数表示方法"><a href="#浮点数表示方法" class="headerlink" title="浮点数表示方法"></a>浮点数表示方法</h3><p>$v=(-1)^s\times M\times 2^E$<br><strong>符号位 Sign:</strong> 0 表示正，1 表示负。<br><strong>尾数 Significand M:</strong> $\in [1.0, 2.0)$<br><strong>阶码 exponent:</strong> E 对浮点数加权，权重为 2 的 E 次幂。</p><p>浮点数分为三个域：符号、阶码、 尾数<br>sign (1 bit) | exponent (e bit) | fraction(or mantissa) (f bit)</p><p>sign 直接编码符号 s<br>k 位阶码字段 $exp=e_{k-1}…e_1e_0$ 编码了 E(但是不等同于 E)<br>n 位小数字段 $frac=f_{n-1}…f_1f_0$ 编码了 M(但是不等同于 M)</p><h4 id="规格化值"><a href="#规格化值" class="headerlink" title="规格化值"></a>规格化值</h4><p>1.exp $\neq$ 000…0 and exp $\neq$ 111…1</p><p>2.阶码字段以 biased(偏置) 形式表示，E = Exp - Bias，Exp 为无符号数，Exp 的范围为 $0000 0001 \sim 1111 1110$ 即 $1 \sim 254$。Bias 为 $2^{k-1}-1$，由此产生的指数取值范围，单精度为 $-126\sim +127$，双精度为 $-1022\sim +1023$</p><p>3.小数字段 frac 被解释为描述小数值 f，$f \in [0,1)$, 二进制表示为 $0.f_{n-1}…f_1f_0$。尾数定义为 $M=1+f$。可以把 M 看作为二进制表示为 $1.f_{n-1}…f_1f_0$。</p><p>4.对于尾数，我们可以“抛掉”小数点左边的 1，只看右侧。M 最小的时候 frac = 000…0(M = 1.0)，M 最大的时候 frac = 111…1(M = 2.0 - $\varepsilon$，也就是 1.111…1)<br><a href="https://blog.csdn.net/weixin_43891234/article/details/114692825">IEEE754浮点数阶码为什么需要偏置bias</a></p><h3 id="Single-precision-32-bits"><a href="#Single-precision-32-bits" class="headerlink" title="Single precision: 32 bits"></a>Single precision: 32 bits</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501134941.png" alt=""></p><h3 id="Double-Precision-64-bits"><a href="#Double-Precision-64-bits" class="headerlink" title="Double Precision: 64 bits"></a>Double Precision: 64 bits</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501135000.png" alt=""></p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>对于浮点数 F = 15213.0<br>$15213_{10}$<br>$= 1110 1101 1011 01_2$<br>$=1.110 1101 1011 01_2 \times 2^{13}$</p><h4 id="Significand"><a href="#Significand" class="headerlink" title="Significand"></a><strong>Significand</strong></h4><p>$M=1.110 1101 1011 01_2$<br>$frac=110 1101 1011 01 0000 0000 00_2$(23 bits)</p><h4 id="Exponent"><a href="#Exponent" class="headerlink" title="Exponent"></a><strong>Exponent</strong></h4><p>$E = 13$ 因为 2 的幂是 13<br>$Bias=127$ 因为 float 单精度表示，k = 8, $Bias=2^{k-1}-1=2^7-1=127$<br>$Exp=140=10001100_2=E + Bias$</p><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p>$0~~10001100~110 1101 1011 01 0000 0000 00_2$<br>从左到右分别为 s exp frac</p><h4 id="非规格化值"><a href="#非规格化值" class="headerlink" title="非规格化值"></a>非规格化值</h4><p>如果使用规格化数，总是使 $M \geq 1$，就无法表示 0。而 +0.0 的浮点表示位模式为全 0。符号位为 0，阶码字段为 0，是一个非规格化值。然而此时 M = f = 0。如果符号位为 1，那么就是 -0.0。</p><p>1.exp = 000…0 成立</p><p>2.E = 1 - Bias</p><p>3.M = 0.xxx…x</p><h4 id="特殊的值"><a href="#特殊的值" class="headerlink" title="特殊的值"></a>特殊的值</h4><p>$exp = 111…1, frac=000…0$ 代表无穷大<br>$exp=111…1,frac\neq 000…0$ $NaN(not~a~number)$ E.g. sqrt(-1) </p><h4 id="Visualization-Floating-Point-Encodings"><a href="#Visualization-Floating-Point-Encodings" class="headerlink" title="Visualization: Floating Point Encodings"></a>Visualization: Floating Point Encodings</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501160831.png" alt=""><br>对于 8 位浮点数：<br>$k = 4, Bias=2^3-1=7,E = 1-Bias=1-7=-6$<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501161139.png" alt=""><br><strong>对于非规格化值：</strong><br>$E=1-Bias$<br>0 0000 000，M = 0，$0 \times 2^{-6} = 0$<br>0 0000 001, $M=1\times 2^{-3}=\frac{1}{8}, \frac{1}{8} \times \frac{1}{2^6} = \frac{1}{512}$<br>…<br>0 0000 111 为非规格化值所能表示的最大值<br><strong>对于规格化值：</strong><br>$E=exp-Bias$<br>0 0001 000 此时 $exp=1, E=exp-Bias=1-7=-6,frac=000,M=1.000$，这是最小的规格化值。<br>……</p><h2 id="Rounding"><a href="#Rounding" class="headerlink" title="Rounding"></a>Rounding</h2><p>IEEE 现在有四种舍入方式，分别为 向零舍入、向下舍入、向上舍入、就近舍入(默认)<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501164705.png" alt=""></p><h4 id="如何理解就近舍入"><a href="#如何理解就近舍入" class="headerlink" title="如何理解就近舍入?"></a>如何理解就近舍入?</h4><p>当为中间数，要向最近的偶数(舍入后保留的最低有效位是偶数)舍入。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501170926.png" alt=""><br>对于 7.8950000，9 是一个奇数，所以向上舍入。<br>对于 7.8850000，8 是一个偶数，所以向下舍入。</p><h3 id="二进制数截断"><a href="#二进制数截断" class="headerlink" title="二进制数截断"></a>二进制数截断</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240501172630.png" alt=""><br>对于 $10.11100_2$ 如果直接截断，则为 10.11 是个奇数，所以应该加上 0.001</p><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>$((-1)^{s1}\times M1 \times 2^{E1}) \times ((-1)^{s2}\times M2 \times 2^{E2})$<br>$Sign~s: s1 \oplus s2$<br>$Significand~M:M1 \times M2$<br>$Exponent~E: E1 + E2$</p><p>如果 M $\geq$ 2，则须有右移位同时增加指数，来让尾数在 1 和 2 之间。<br>如果 E 超出范围，则会溢出到无穷大。<br>如果 M 有太多位，则需要就近舍入。</p><p>(3.14 + 1e10) - 1e10 = 0<br>3.14 + (1e10 - 1e10) = 3.14<br>1e20 $*$ (1e20 - 1e20) = 0.0</p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = ...;</span><br><span class="line"><span class="type">float</span> f = ...;</span><br><span class="line"><span class="type">double</span> d = ...;</span><br><span class="line"></span><br><span class="line">x == (<span class="type">int</span>)(<span class="type">float</span>) x; <span class="comment">// False, 在浮点数的 frac 区域没有足够的位来表示 int,会舍入</span></span><br><span class="line">x == (<span class="type">int</span>)(<span class="type">double</span>) x; <span class="comment">// True</span></span><br><span class="line">f == (<span class="type">float</span>)(<span class="type">double</span>) f; <span class="comment">// True</span></span><br><span class="line">d == (<span class="type">double</span>)(<span class="type">float</span>) d; <span class="comment">// False</span></span><br><span class="line">f == -(-f); <span class="comment">// True</span></span><br><span class="line"><span class="number">2</span> / <span class="number">3</span> == <span class="number">2</span> / <span class="number">3.0</span> <span class="comment">// False, 2/3=0, 2/3.0 是一个浮点数</span></span><br><span class="line">d &lt; <span class="number">0.0</span> -&gt; ((d * <span class="number">2</span>) &lt; <span class="number">0.0</span>) <span class="comment">// Yes, 即使 d * 2 溢出到负无穷大，也是小于 0</span></span><br><span class="line">d &gt; f -&gt; -f &gt; -d <span class="comment">// Yes</span></span><br><span class="line">d * d &gt;= <span class="number">0.0</span> <span class="comment">// Yes</span></span><br><span class="line">(d + f) - d == f <span class="comment">// No</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP | Chapter 1 | 计算机系统漫游</title>
      <link href="/post/c390144.html"/>
      <url>/post/c390144.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSAPP-Chapter-1-计算机系统漫游"><a href="#CSAPP-Chapter-1-计算机系统漫游" class="headerlink" title="CSAPP | Chapter 1 | 计算机系统漫游"></a>CSAPP | Chapter 1 | 计算机系统漫游</h1><p>计算机系统由<strong>系统软件</strong>与<strong>硬件</strong>组成。<br>对于一个简单的 C 程序 hello.c 来说，即便它非常简单，但是为了让它运行，系统的每个主要组成部分都需要协调工作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="信息就是位-上下文"><a href="#信息就是位-上下文" class="headerlink" title="信息就是位 + 上下文"></a>信息就是位 + 上下文</h2><p>hello.c 的 ASCII 码文本表示<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240413105808.png" alt="image.png"><br>hello 程序的生命周期从<strong>源程序</strong>(或源文件)开始，源程序实际上是由 0 和 1 组成的位(比特)序列。8 个位又组成 1 个字节。每个字节表示文本中的某些文本字符。<br>大部分计算机系统用 ASCII 标准，即用单个字节表示每个字符。<br>像 hello.c 这样只有 ASCII 字符构成的文件称为<strong>文本文件</strong>，所有其他文件都称为<strong>二进制文件</strong>。<br>实际上，系统中所有信息，都是以位序列存储，也就是二进制序列。唯一区分不同数据的就是我们读到这些对象时的上下文。例如，在不同上下文中，一个同样的字节序咧可能表示一个整数、浮点数、字符串或者机器指令。</p><p><strong>ISO：International Standards Organization</strong> 国际标准化组织</p><h2 id="程序被其他程序翻译成不同的格式"><a href="#程序被其他程序翻译成不同的格式" class="headerlink" title="程序被其他程序翻译成不同的格式"></a>程序被其他程序翻译成不同的格式</h2><p>为了能运行 hello.c 程序，每条 C 语句都必须被其他程序转化为一系列<strong>低级机器语言指令</strong>，然后这些指令按照一种称为<strong>可执行目标程序</strong>的格式打包好，并以二进制磁盘文件的形式存储。目标程序也称为<strong>可执行目标文件</strong>。<br>Unix 系统，源文件到目标文件的转化由<strong>编译器驱动</strong>完成。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello hello.c</span><br></pre></td></tr></table></figure></p><h3 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h3><p><strong>预处理器</strong>preprocessor、<strong>编译器</strong>compiler、<strong>汇编器</strong>assembler和<strong>链接器</strong>linker：<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240414111155.png" alt="编译系统"></p><h4 id="预处理阶段-Preprocessing-phase"><a href="#预处理阶段-Preprocessing-phase" class="headerlink" title="预处理阶段 Preprocessing phase"></a>预处理阶段 Preprocessing phase</h4><p>预处理器(cpp)根据以 # 开头的命令修改原始的 C 程序。例如 #include<stdio.h> 命令告诉预处理器读取系统头文件 stdio.h 的内容并把它插入到程序文本中。结果得到了另一个 C 程序，是以 .i 作为文件后缀(扩展名) suffix.</p><h4 id="编译阶段-Compilation-phase"><a href="#编译阶段-Compilation-phase" class="headerlink" title="编译阶段 Compilation phase"></a>编译阶段 Compilation phase</h4><p>编译器(cc1)将文本文件 hello.i 翻译成文本文件 hello.s，它包含一个汇编语言程序，这个程序包含了 main 函数的定义。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">subq $8, %rsp</span><br><span class="line">movl $.LC0, %edi</span><br><span class="line">call puts</span><br><span class="line">movl $0, %eax</span><br><span class="line">addq $8, %rsp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></p><h4 id="汇编阶段-Assembly-phase"><a href="#汇编阶段-Assembly-phase" class="headerlink" title="汇编阶段 Assembly phase"></a>汇编阶段 Assembly phase</h4><p>汇编器(as)将 hello.s 翻译为机器语言指令，把这些指令打包成一种叫做可重定位目标程序(relocatable object program)，并将结果保存在目标文件 hello.o 中。hello.o 是一个二进制文件，它包含 main 函数的指令编码(encode)。如果我们用文本编辑器直接打开这个文件，会看到一堆乱码(gibberish)</p><h4 id="链接阶段-Linking-phase"><a href="#链接阶段-Linking-phase" class="headerlink" title="链接阶段 Linking phase"></a>链接阶段 Linking phase</h4><p>在 hello 程序中，调用了 printf 函数，它是每个 C 编译器都提供的标准 C 库(standard C library) 中的一个函数。 printf 函数存在于一个名为 printf.o 的单独的预编译好了的目标文件中，而这个文件必须以某种方式合并到 hello.o 程序中。链接器(ld) 就负责处理这种合并，结果得到 hello 文件，它是一个<strong>可执行目标文件</strong>，可以被加载到内存中并由系统执行。</p><h2 id="处理器读取并解释存储在内存中的指令"><a href="#处理器读取并解释存储在内存中的指令" class="headerlink" title="处理器读取并解释存储在内存中的指令"></a>处理器读取并解释存储在内存中的指令</h2><p>要运行可执行 hello 程序，在 Linux 系统下我们输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">linux&gt; </span><span class="language-bash">./hello</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><br>可以看到终端输出了 hello, world<br>shell 会判断输入的命令，如果第一个单词不是内置的指令，那么就会被认为是可执行文件的名字，并且运行它。</p><h3 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240414235737.png" alt="image.png"></p><h4 id="Buses-总线"><a href="#Buses-总线" class="headerlink" title="Buses 总线"></a>Buses 总线</h4><p>总线负责携带信息字节并且在各个部件中传递。通常设计为传送特定长度的字节块(字)。</p><h4 id="I-O-设备"><a href="#I-O-设备" class="headerlink" title="I/O 设备"></a>I/O 设备</h4><p>I/O 设备即输入/输出设备，是系统与外部世界的联系通道。每个 I/O 设备都通过一个控制器或者适配器与 I/O 总线连接。<br>控制器(controller) 是 I/O 设备本身或者系统的主印制电路板 (主板 motherboard)。<br>适配器(adpater) 是一块插在主板插槽上的卡。<br>虽然他们的封装方式不同，但是他们的功能都是在 I/O 总线和 I/O 设备之间传递信息。</p><h4 id="Main-Memory-主存"><a href="#Main-Memory-主存" class="headerlink" title="Main Memory 主存"></a>Main Memory 主存</h4><p>主存是一个临时存储设备。在处理器执行程序时，用来存放程序和程序处理的数据。<br>物理上：主存由 <strong>动态随机存储存储器 (DRAM)</strong> 组成。<br>逻辑上：存储器是一个线性的字节数组，每个字节都有自己特定的从零开始地址(数组索引)。</p><h4 id="Processor-处理器"><a href="#Processor-处理器" class="headerlink" title="Processor 处理器"></a>Processor 处理器</h4><p>中央处理单元(CPU)，简称处理器，是解释或执行存储在主存中指令的引擎。<br>它的核心是一个大小为一个自己的存储设备(或寄存器)，称为 <strong>程序计数器(PC)</strong>。在任何时候，PC 都指向主存中的某条机器语言指令(也就是含有该指令的地址)。<br>在计算机系统通电到断电，处理器一直在不断执行程序计数器指向的指令，再更新程序计数器，指向下一条指令。<br>处理器按照指令集架构(ISA: Instruction set architecture) 来操作。处理器读取 PC 指向的内存处的指令并且解释指令中的位，进行指令的操作，并且更新 PC，让它只想下一个指令(这条指令不一定和刚刚执行的指令相邻)。<br><strong>Main memory</strong> 主存<br><strong>register file</strong> 寄存器文件: 由一些单个字长的寄存器组成，每个寄存器都有自己唯一的名字。<br><strong>ALU(arithmetic/logic unit)</strong> 算术逻辑单元: 计算新的数据和地址值</p><p>CPU 可能在指令要求下执行的操作：<br><strong>Load 加载</strong>: 从主存复制一个字节或者一个字到寄存器来覆盖寄存器原先的内容。<br><strong>Store 存储</strong>: 从寄存器复制一个字节或者一个字到主存的某个位置来覆盖这个位置上原来的内容。<br><strong>Operate 操作</strong>: 把两个寄存器的内容复制到 ALU，ALU 对他们进行算数操作，并将结果存放到一个寄存器中，覆盖寄存器中原来的内容。<br><strong>Jump 跳转</strong>: 从指令本身抽取一个字并复制到 PC(程序计数器)，覆盖 PC 原先的值。</p><h5 id="hello-程序的运行"><a href="#hello-程序的运行" class="headerlink" title="hello 程序的运行"></a>hello 程序的运行</h5><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424111630.png" alt="image.png"><br>当目标文件 hello 的代码和数据被加载到主存，处理器就开始执行 hello 程序 main 程序中的机器语言指令。这些指令将 “hello, world\n” 字符串中的字节从主存复制到寄存器文件，再从寄存器文件中复制到显示设备，最终显示到屏幕上。<br>如果使用 direct memory access(DMA) 技术，数据可以不通过处理器而直接从磁盘到达主存。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424112158.png" alt="image.png"></p><h2 id="Caches-高速缓存"><a href="#Caches-高速缓存" class="headerlink" title="Caches 高速缓存"></a>Caches 高速缓存</h2><p>由于信息从一个地方移动到另一个地方需要花费大量开销(overhead)。<br>Cache Memory 高速缓存存储器 作为暂时的集结区域，存放处理器可能会用到的信息。</p><h3 id="Cache-memories"><a href="#Cache-memories" class="headerlink" title="Cache memories"></a>Cache memories</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424112458.png" alt="image.png"></p><h3 id="Memory-Hierarchy"><a href="#Memory-Hierarchy" class="headerlink" title="Memory Hierarchy"></a>Memory Hierarchy</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424231318.png" alt="image.png"></p><h2 id="The-Operating-System-Manages-the-Hardware"><a href="#The-Operating-System-Manages-the-Hardware" class="headerlink" title="The Operating System Manages the Hardware"></a>The Operating System Manages the Hardware</h2><p>应用层如果想控制硬件，必须经过操作系统，见下图。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424231530.png" alt="image.png"></p><h3 id="Processes-进程"><a href="#Processes-进程" class="headerlink" title="Processes 进程"></a>Processes 进程</h3><p>进程：A process is the operating system’s abstraction for a running program.<br>multicore processors: 多核处理器<br>uniprocessor system: 单处理器系统<br>multiprocessor system: 多处理器系统<br>context switching: 上下文切换<br>操作系统保持跟踪进程所需的所有状态信息。这种状态就是 <strong>上下文</strong>。单处理器系统系统在任何一个时刻只能执行一个进程的代码。当操作系统决定把控制权转换为一个新的进程，就会进行上下文切换，保存当前进程的上下文，恢复新进程的上下文，然后将控制权传递到新进程，新进程就会从上次停止的地方开始。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424234059.png" alt="image.png"></p><blockquote><p>示例场景中有两个并发的进程∶shell 进程和 hello 进程。最开始，只有 shell 进程在运行，即等待命令行上的输入。当我们让它运行 hello 程序时，shell 通过调用一个专门的函数，即系统调用，来执行我们的请求，系统调用会将控制权传递给操作系统。操作系统保存 shell 进程的上下文，创建一个新的 hello 进程及其上下文，然后将控制权传给新的 hello 进程。hello 进程终止后，操作系统恢复 shell 进程的上下文，并将控制权传回给它，shell 进程会继续等待下一个命令行输入。</p></blockquote><p>内核 kernel 控制从一个进程过渡到另一个进程。</p><h3 id="Threads-线程"><a href="#Threads-线程" class="headerlink" title="Threads 线程"></a>Threads 线程</h3><p>实际上，一个进程可以由多个称为线程的执行单元组成。<br>每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。</p><h3 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h3><p>虚拟内存假设每个进程都在独占地使用主存，每个进程看到的内存都是一样的，称为虚拟地址空间。<br>进程的虚拟地址空间：(图中的地址从下往上增大)<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424234925.png" alt="image.png"><br>从下往上依次为：</p><p>1.程序代码和数据：所有进程的代码是从同一固定地址开始的。</p><p>2.堆：代码和数据区在一开始运行时就被指定了大小。而堆可以动态扩展和收缩，例如使用 malloc 和 free 函数</p><p>3.共享库: 类似于 C 标准库</p><p>4.栈:在用户虚拟地址空间的顶部是用户栈。编译器用它来实现函数调用。栈和堆一样，可以动态扩展和收缩。每当我们调用一个函数，栈就会增长。从一个函数返回时，栈就会收缩。</p><p>5.虚拟内存:应用程序不能直接读写这个区域的内容或者直接调用内核代码定义的函数。只能调用内核来执行这些操作。</p><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>文件就是字节序列。<br>系统中所有输入输出都是通过使用一小组称为 Unix I/O 的系统函数调用读写文件来实现的。</p><h2 id="Systems-Communicate-with-Other-Systems-Using-Networks"><a href="#Systems-Communicate-with-Other-Systems-Using-Networks" class="headerlink" title="Systems Communicate with Other Systems Using Networks"></a>Systems Communicate with Other Systems Using Networks</h2><p>网络可以视作一个 I/O 设备。现代系统经常通过网络和其他系统连接在一起。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430202003.png" alt=""></p><h3 id="利用-telnet-通过网络远程运行-hello"><a href="#利用-telnet-通过网络远程运行-hello" class="headerlink" title="利用 telnet 通过网络远程运行 hello"></a>利用 telnet 通过网络远程运行 hello</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430202114.png" alt=""></p><h2 id="Concurrency-and-Parallelism-并发和并行"><a href="#Concurrency-and-Parallelism-并发和并行" class="headerlink" title="Concurrency and Parallelism 并发和并行"></a>Concurrency and Parallelism 并发和并行</h2><p>并发(Concurrency)：指的是一个同时具有多个活动的系统<br>并行(Parallelism)；用并发来使一个系统运行的更快。</p><h3 id="Thread-Level-Concurrency-线程级并发"><a href="#Thread-Level-Concurrency-线程级并发" class="headerlink" title="Thread-Level Concurrency 线程级并发"></a>Thread-Level Concurrency 线程级并发</h3><p>使用线程，可以在一个进程中执行多个控制流。传统意义上是通过使一台计算机在他正在执行的进程间快速切换来实现的。它允许多个用户同时与系统进行交互。以前用的是 <strong>单处理器系统</strong>，用一个处理器来完成多个任务切换。<br><strong>多处理器系统</strong>：一个由但操作系统内核控制的多处理器组成的系统。<br>多核也就是将多个 CPU(核) 集成到一个集成电路芯片上。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430204155.png" alt=""></p><h4 id="4-个处理器核集成在一个芯片上"><a href="#4-个处理器核集成在一个芯片上" class="headerlink" title="4 个处理器核集成在一个芯片上"></a>4 个处理器核集成在一个芯片上</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430204300.png" alt=""><br><strong>超线程(同时多线程)Hyperthreading</strong>: 允许一个 CPU 执行多个控制流。</p><h3 id="Instruction-Level-Parallelism-指令级并行"><a href="#Instruction-Level-Parallelism-指令级并行" class="headerlink" title="Instruction-Level Parallelism 指令级并行"></a>Instruction-Level Parallelism 指令级并行</h3><p>现代处理器可以同时执行多条指令的属性称为指令集并行。</p><h3 id="Single-Instruction-Multiple-Data-SIMD-Parallelism-单指令多数据并行"><a href="#Single-Instruction-Multiple-Data-SIMD-Parallelism-单指令多数据并行" class="headerlink" title="Single-Instruction, Multiple-Data (SIMD) Parallelism 单指令多数据并行"></a>Single-Instruction, Multiple-Data (SIMD) Parallelism 单指令多数据并行</h3><p>允许一条指令产生多个可以并行执行的操作。</p><h2 id="Abstractions-in-CS"><a href="#Abstractions-in-CS" class="headerlink" title="Abstractions in CS"></a>Abstractions in CS</h2><p>API: application program interface 应用程序接口。</p><h4 id="计算机系统提供的一些抽象"><a href="#计算机系统提供的一些抽象" class="headerlink" title="计算机系统提供的一些抽象"></a>计算机系统提供的一些抽象</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430205242.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP | Bits, Bytes, and Integers</title>
      <link href="/post/b8742b63.html"/>
      <url>/post/b8742b63.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSAPP-Bits-Bytes-and-Integers"><a href="#CSAPP-Bits-Bytes-and-Integers" class="headerlink" title="CSAPP | Bits, Bytes, and Integers"></a>CSAPP | Bits, Bytes, and Integers</h1><h2 id="Great-Reality"><a href="#Great-Reality" class="headerlink" title="Great Reality"></a>Great Reality</h2><h3 id="Ints-are-not-Integers-Floats-are-not-Reals"><a href="#Ints-are-not-Integers-Floats-are-not-Reals" class="headerlink" title="Ints are not Integers, Floats are not Reals"></a><strong>Ints are not Integers, Floats are not Reals</strong></h3><p>对于 (x + y) + z = x + (y + z)，无符号整形和有符号整形是成立的。<br>但是对于浮点数, (1e20 + -1e20) + 3.14 -&gt; 3.14，而 1.e20 + (-1e20 + 3.14) = 0<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>];</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">&#125;<span class="type">struct_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">struct_t</span> s;</span><br><span class="line">s.d = <span class="number">3.14</span>;</span><br><span class="line">s.a[i] = <span class="number">1073741824</span>; <span class="comment">/* Possibly out of bounds */</span></span><br><span class="line"><span class="keyword">return</span> s.d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240413142810.png" style="zoom:50%" ><br>我们发现，当 i = 5 时，程序会崩溃。</p><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation:"></a>Explanation:</h3><p>C 语言不会在运行中做任何边界检查<br>对于下图，垂直链的每个块代表 4 字节。a 数组的两个元素都是 4 字节，d 是 8 个字节<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240413142922.png" style="zoom:75%"><br>当 i 大于 1 时，赋值 a[2] 会赋值给 d3 … d0，赋值 a[3] 会赋值给 d4 … d7，所以 i = 4 的时候正常，后面报不报错看栈的空间等。</p><h2 id="Memory-System-Performance-Example"><a href="#Memory-System-Performance-Example" class="headerlink" title="Memory System Performance Example"></a>Memory System Performance Example</h2><p>下面有两端函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">copyij</span><span class="params">(<span class="type">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="type">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j ++)</span><br><span class="line">dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">copyji</span><span class="params">(<span class="type">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="type">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i ++)</span><br><span class="line">dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看出它们的区别在于一个行优先，一个列优先。而第一段代码运行速度远远快于第二段代码。以行优先代码的运行速度快于一列一列运行。</p><h2 id="Everything-is-bits"><a href="#Everything-is-bits" class="headerlink" title="Everything is bits"></a>Everything is bits</h2><p>整数、浮点数等都可以表示为二进制。</p><h3 id="Data-Representations"><a href="#Data-Representations" class="headerlink" title="Data Representations"></a>Data Representations</h3><div class="table-container"><table><thead><tr><th style="text-align:center">C Data Type</th><th style="text-align:center">Typical 32-bit</th><th style="text-align:center">Typical 64-bit</th><th style="text-align:center">x86-64</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">10/16</td></tr><tr><td style="text-align:center">pointer</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h2><p>And: A &amp; B = 1 when both A = 1 and B = 1<br>Or: A | B = 1 when either A = 1 or B = 1<br>Not: ~A = 1 when A = 0<br>Exclusive-Or(Xor): A^B = 1 when either A = 1 or B = 1, but not both 相同为 0，相异为 1</p><h3 id="Representing-amp-Manipulating"><a href="#Representing-amp-Manipulating" class="headerlink" title="Representing &amp; Manipulating"></a>Representing &amp; Manipulating</h3><h4 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h4><p>Width w bit vector represents subsets of {0, …, w - 1}<br>$a_j = 1~ ~if~ ~j~ ~\in A$</p><p>01101001 代表 {0, 3, 5, 6}<br>7<strong>65</strong>4<strong>3</strong>21<strong>0</strong></p><p>01010101 代表 {0, 2, 4, 6}<br>7<strong>6</strong>5<strong>4</strong>3<strong>2</strong>1<strong>0</strong></p><h4 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h4><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">操作</th><th style="text-align:center">二进制序列</th><th style="text-align:center">集合</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">Intersection 交</td><td style="text-align:center">01000001</td><td style="text-align:center">{0, 6}</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center">Union 并</td><td style="text-align:center">01111101</td><td>{0, 2 ,3, 4, 5, 6}</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">Symmetric difference 对称差异</td><td style="text-align:center">00111100</td><td style="text-align:center">{2, 3, 4, 5}</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">Complement 补</td><td style="text-align:center">10101010</td><td style="text-align:center">{1, 3, 5, 7}</td></tr></tbody></table></div><h3 id="Bit-Level-Operations-in-C"><a href="#Bit-Level-Operations-in-C" class="headerlink" title="Bit-Level Operations in C"></a>Bit-Level Operations in C</h3><p>位运算</p><h4 id="Examples-Char-data-type"><a href="#Examples-Char-data-type" class="headerlink" title="Examples(Char data type)"></a>Examples(Char data type)</h4><p>$\sim0x41 -&gt; 0xBE$<br>    $\sim01000001_2-&gt;10111110_2$ </p><p>$\sim0x00 -&gt; 0xFF$<br>    $\sim0000 0000_2-&gt;1111 1111_2$</p><p>$\sim0x69~ ~\&amp;~ ~0x55 -&gt; 0x41$<br>    $\sim0110 1001_2 $ $\&amp;$ $0101 0101_2-&gt;0100 0001_2$</p><p>$\sim0x69 ~~| ~~0x55 -&gt;  0x7D$<br>    $\sim 01101001_2$ $|$ $01010101_2 -&gt; 01111101_2$​​​</p><h3 id="Logic-Operations-in-C"><a href="#Logic-Operations-in-C" class="headerlink" title="Logic Operations in C"></a>Logic Operations in C</h3><p>$\&amp;\&amp;, ||, !$<br>    view 0 as “False”<br>    Anythings nonzero as “True”<br>    <strong>Always return 0 or 1</strong><br>    <strong>Early termination</strong><br>C 语言的逻辑运算只有 2 种结果， 0x00 和 0x01<br>取反是<strong>按结果取反</strong>，不是按位取反！</p><h4 id="Examples-Char-data-type-1"><a href="#Examples-Char-data-type-1" class="headerlink" title="Examples(Char data type)"></a>Examples(Char data type)</h4><p>$!0x41 -&gt; 0x00$ 相当于对 true 取反，结果为 false, 为 0x00<br>$!0x00 -&gt; 0x01$<br>$!!0x41-&gt; 0x01$</p><p>$0x69~ ~\&amp;\&amp;~ ~0x55 -&gt; 0x01$<br>$0x69~ ~||~ ~0x55 -&gt; 0x01$<br>$p~~$$\&amp;\&amp;$ $*p$ (avoids null pointer access) 在访问之前先判断是否为空指针，如果是空指针，会提前终止。</p><h3 id="Shift-Operation"><a href="#Shift-Operation" class="headerlink" title="Shift Operation"></a>Shift Operation</h3><h4 id="Left-Shift-x-lt-lt-y"><a href="#Left-Shift-x-lt-lt-y" class="headerlink" title="Left Shift: x &lt;&lt; y"></a>Left Shift: x &lt;&lt; y</h4><p>Shift bit-vector x left y positions, Throw away extra bits on left<br>Fill with 0’s on right</p><h4 id="Right-Shift-x-gt-gt-y"><a href="#Right-Shift-x-gt-gt-y" class="headerlink" title="Right Shift: x &gt;&gt; y"></a>Right Shift: x &gt;&gt; y</h4><p>Shift bit-vector x right y position, Throw away extra bits on right<br>Logical Shift<br>    Fill with 0’s on left<br>Arithmetic Shift<br>    Replicate(复制) most significant bit on left<br>对于右移运算，分为算数右移和逻辑右移。他们的填充规则不一样。算数右移填充的是符号位的数字。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Argument x</th><th style="text-align:center">0110 0010</th></tr></thead><tbody><tr><td style="text-align:center">&lt;&lt; 3</td><td style="text-align:center">0001 0000</td></tr><tr><td style="text-align:center">Log. &gt;&gt; 2</td><td style="text-align:center">0001 1000</td></tr><tr><td style="text-align:center">Arith. &gt;&gt; 2</td><td style="text-align:center">0001 1000</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Argument x</th><th style="text-align:center">1010 0010</th></tr></thead><tbody><tr><td style="text-align:center">&lt;&lt; 3</td><td style="text-align:center">0001 0000</td></tr><tr><td style="text-align:center">Log. &gt;&gt; 2</td><td style="text-align:center">0010 1000</td></tr><tr><td style="text-align:center">Arith. &gt;&gt; 2</td><td style="text-align:center">1110 1000</td></tr></tbody></table></div><h4 id="Undefined-Behavior"><a href="#Undefined-Behavior" class="headerlink" title="Undefined Behavior"></a>Undefined Behavior</h4><p>Shift amount &lt; 0 or &gt;= word size</p><h3 id="Numeric-Ranges"><a href="#Numeric-Ranges" class="headerlink" title="Numeric Ranges"></a>Numeric Ranges</h3><h4 id="Unsigned-Values"><a href="#Unsigned-Values" class="headerlink" title="Unsigned Values"></a>Unsigned Values</h4><p>$UMin = 0 -&gt; 000…0$<br>$UMax = 2^w - 1 -&gt; 111…1$<br>$UMax = 2 \times TMax + 1$</p><h4 id="Two’s-Complement-Values-补码"><a href="#Two’s-Complement-Values-补码" class="headerlink" title="Two’s Complement Values (补码)"></a>Two’s Complement Values (补码)</h4><p>$TMin = -2^{w - 1} -&gt; 100…0$<br>$TMax = w^{w - 1} - 1 -&gt; 011…1$<br>$|TMin| = TMax + 1$</p><h4 id="Other-Values"><a href="#Other-Values" class="headerlink" title="Other Values"></a>Other Values</h4><p>$Minus~1 -&gt; 111…1$</p><h5 id="Values-for-W-16"><a href="#Values-for-W-16" class="headerlink" title="Values for W = 16"></a>Values for W = 16</h5><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Decimal</th><th style="text-align:center">Hex</th><th style="text-align:center">Binary</th><th></th></tr></thead><tbody><tr><td style="text-align:center">UMax</td><td style="text-align:center">65535</td><td style="text-align:center">FF FF</td><td style="text-align:center">11111111 11111111</td><td></td></tr><tr><td style="text-align:center">TMax</td><td style="text-align:center">32767</td><td style="text-align:center">7F FF</td><td style="text-align:center">01111111 11111111</td><td></td></tr><tr><td style="text-align:center">TMin</td><td style="text-align:center">-32768</td><td style="text-align:center">80 00</td><td style="text-align:center">10000000 00000000</td><td></td></tr><tr><td style="text-align:center">-1</td><td style="text-align:center">-1</td><td style="text-align:center">FF FF</td><td style="text-align:center">11111111 11111111</td><td></td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">00 00</td><td style="text-align:center">00000000 00000000</td><td></td></tr><tr><td style="text-align:center">$UMax = 2 \times TMax + 1$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h4 id="From-Binary-to-Unsigned"><a href="#From-Binary-to-Unsigned" class="headerlink" title="From Binary to Unsigned"></a>From Binary to Unsigned</h4><p>$B2U(X) = \sum_{i = 0}^{w - 1}x_i 2^i$</p><h4 id="From-Binary-to-Two’s-complement"><a href="#From-Binary-to-Two’s-complement" class="headerlink" title="From Binary to Two’s complement"></a>From Binary to Two’s complement</h4><p>$B2T(X) = -x_{w - 1} 2^{w - 1} + \sum_{i = 0}^{w - 2} x_i 2^i$<br>对于补码，最高位称为符号位，为 1 代表负数。</p><h4 id="Unsigned-amp-Signed-Numeric-Values"><a href="#Unsigned-amp-Signed-Numeric-Values" class="headerlink" title="Unsigned &amp; Signed Numeric Values"></a>Unsigned &amp; Signed Numeric Values</h4><div class="table-container"><table><thead><tr><th>X</th><th>B2U(X)</th><th>B2T(X)</th></tr></thead><tbody><tr><td>0000</td><td>0</td><td>0</td></tr><tr><td>0001</td><td>1</td><td>1</td></tr><tr><td>0010</td><td>2</td><td>2</td></tr><tr><td>0011</td><td>3</td><td>3</td></tr><tr><td>0100</td><td>4</td><td>4</td></tr><tr><td>0101</td><td>5</td><td>5</td></tr><tr><td>0110</td><td>6</td><td>6</td></tr><tr><td>0111</td><td>7</td><td>7</td></tr><tr><td>1000</td><td>8</td><td>-8</td></tr><tr><td>1001</td><td>9</td><td>-7</td></tr><tr><td>1010</td><td>10</td><td>-6</td></tr><tr><td>1011</td><td>11</td><td>-5</td></tr><tr><td>1100</td><td>12</td><td>-4</td></tr><tr><td>1101</td><td>13</td><td>-3</td></tr><tr><td>1110</td><td>14</td><td>-2</td></tr><tr><td>1111</td><td>15</td><td>-1</td></tr><tr><td>观察可知，负数与对应的正数关系是，正数取反加 1</td><td></td></tr></tbody></table></div><h4 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h4><p>如果有符号数和无符号数混合，有符号数会被隐式转换为无符号数。<br>$-1 &gt; 0U$ 因为 $-1$ 会被转换为无符号数 $1111~ ~1111$ 也就变成 $UMax$<br>$W =32,~TMIN = -2147483647, ~TMAX=2147483647$<br>$2147483647U &lt; -2147483647 - 1$<br>$(unsigned)-1 &gt; -2$<br>$2147483647 &lt; 2147483648U$<br>$2147483647 &gt; (int)2147483648U$, 对于 32 位系统来说，$int$ 范围是 $-2147483648 \sim 2147483647$,$unsigned~int$ 范围是 $0 \sim 4294967295$，所以将 $2147483648U$ 转换为 $int$, 会溢出。</p><p>考虑以下的代码：<br>对于 x = TMin, 他的输出还是 TMin。<br>因为 $-x = \sim x + 1$<br>对于 TMin 1000…0 取反 0111…1 再加 1， 1000…0 所以结果还是 TMin<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> -x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure><br>以下代码会造成无限循环。 $i$ 会从 $0$ 变为 $UMax$ (个人认为是 0 减 1 为 -1, 表示为全 1，则解释为 UMax)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">f(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>对于下面的代码, $sizeof(char)$ 实际上返回的是 无符号数。$i$ 为有符号数，有符号数和无符号数比较会被转换为无符号数。$i - sizeof(char) &gt;= 0$ 这个条件就会一直成立，无限循环。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = n - <span class="number">1</span>; i - <span class="keyword">sizeof</span>(<span class="type">char</span>) &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">f(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Sign-Extension"><a href="#Sign-Extension" class="headerlink" title="Sign Extension"></a>Sign Extension</h3><p>Task:<br>    Given w-bit signed integer x<br>    Convert it to (w+k)-bit integer with same value<br>Rule:<br>    Make k copies of sign bit<br>    $X’ = x_{w-1}, …, x_{w-1}, x_{w - 2}, …, x_0$<br>对于 $1110$，符号位权重为 $-2^3=-8$，将它左移一位，变为 $11110$，原先符号位位置上的权重变为了 $8$，而新的符号位权重为 $-2^4=-16$, $-16 + 8 = -8$, 所以并不改变总和的效应。<br>Converting from smaller to larger integer data type, C automatically performs sign extension.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> x = <span class="number">15213</span>;</span><br><span class="line"><span class="type">int</span> ix = (<span class="type">int</span>) x;</span><br><span class="line"><span class="type">short</span> <span class="type">int</span> y = <span class="number">-15213</span>;</span><br><span class="line"><span class="type">int</span> iy = (<span class="type">int</span>) y;</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240424105410.png" alt="image.png"></p><h3 id="Two’s-Complement-Addition"><a href="#Two’s-Complement-Addition" class="headerlink" title="Two’s Complement Addition"></a>Two’s Complement Addition</h3><p>-5 + 3<br> 1011<br>+0011<br>1110  -&gt; -2</p><p>-3 + 5<br> 1101<br>+0101<br>10010 -&gt; 0010 -&gt; 2 </p><p>-3 + -5<br> 1101<br>+1011<br>10000 -&gt; 0 负溢出</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>移位指令比乘法指令花的时间更少。<br>$u &lt;&lt; k$ 相当于 $u \times 2^k$<br>$u &gt;&gt; k$ 相当于 $\lfloor {u / 2^k} \rfloor$<br>前面介绍过算数右移与逻辑右移。算数右移<strong>可以保持符号位</strong>。例如 1010 为 -6，算数右移 1 位，则为 1101 为 -3。但是此时如果再右移 1 位，得到 1110 为 -2。结果出现问题。<br>特别的，对于负数的除法，如果需要右移 $k$ 位，我们需要先加上偏移量 $2^k - 1$。<br>1101 + 1 = 1110 此时再右移 1 位，得到 1111 为 -1。</p><h2 id="正数变负数"><a href="#正数变负数" class="headerlink" title="正数变负数"></a>正数变负数</h2><p>$x -&gt; -x$ 需要对所有位取反，再 + 1。<br>0101 -&gt; 5<br>1010 + 1 = 1011 -&gt; -5</p><h2 id="使用-Unsigned-一些方式"><a href="#使用-Unsigned-一些方式" class="headerlink" title="使用 Unsigned 一些方式"></a>使用 Unsigned 一些方式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = cnt - <span class="number">2</span>; i &lt; cnt; i --)</span><br><span class="line">a[i] += a[i + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>Better Version:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = cnt - <span class="number">2</span>; i &lt; cnt; i --)</span><br><span class="line">a[i] += a[i + <span class="number">1</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Data type size_t defined as unsigned value with length = word size</span></span><br><span class="line"><span class="comment">2. Code will work even if cnt = UMax</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>然而，当 cnt 为 signed 并且小于 0 时。会有问题。cnt 会被转换为无符号数，就会变得非常大，导致无限循环。</p><h2 id="大端序和小端序"><a href="#大端序和小端序" class="headerlink" title="大端序和小端序"></a>大端序和小端序</h2><h4 id="Big-Endian"><a href="#Big-Endian" class="headerlink" title="Big Endian"></a>Big Endian</h4><p>高位字节存入低地址，低位字节存入高地址。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430134050.png" alt=""><br>上图从左往右 01234567</p><h4 id="Little-Endian"><a href="#Little-Endian" class="headerlink" title="Little Endian"></a>Little Endian</h4><p>低位字节存入低地址，高位字节存入高地址。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430134057.png" alt=""><br>从右往左 01234567<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430134509.png" alt=""></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串以 null 结尾，也就是 ‘0’<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> S[<span class="number">6</span>] = <span class="string">&#x27;18213&#x27;</span>;</span><br></pre></td></tr></table></figure><br>字符 ‘0’ 为 0x30，数字字符 i 为 0x30 + i<br>对于字符串数组来说，大端法和小端法存储没有区别。因为字符是一个字节一个字节存储，而每个都是一个整体。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240430182303.png" alt=""></p><blockquote><p>[!NOTE]<br>例如对于 0x12345678 来说，这是一个整体，0x12 是整体的高位，0x78 是整体的低位，存储就是 0x78 0x56 0x34 0x12。而对于字符数组，内部组织形式是一个字节一个字节，数组相当于是 0x12 0x34 0x56 0x78，每个字符是一个整体。</p></blockquote><h2 id="易错"><a href="#易错" class="headerlink" title="易错"></a>易错</h2><p>1.如果 x &lt; 0, 那么 $((x <em> 2) &lt; 0)$ 吗？ 错误，因为可能会负溢出，$x </em> 2$ 可能会是一个正数。</p><p>2.如果一个数 x，x &amp; 7 == 7，也就是最低的 3 位为 111，如果 (x &lt;&lt; 30) 那么结果 &lt; 0。</p><p>3.Is ux &gt; -1? 错的。无符号数和有符号数作比较，有符号数被隐式转换为无符号数。-1 就会被转换为 UMax。</p><p>4.如果 x &gt; y，那么 -x &lt; -y 一定成立吗？ 错误的，因为如果 y 为 TMin，我们直到 $|TMin| = TMax + 1$。对 TMin 取相反数，也就是 TMin 的位取反再 + 1，那就变成 TMax + 1，发生正溢出。又变回了 TMin。</p><p>5.x &gt;= 0 那么 -x &lt;= 0 吗？ 正确的</p><p>6.x &lt;= 0 那么 -x &gt;= 0 吗？ 错误的，比如 TMin。</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker | 入门:安装与配置</title>
      <link href="/post/3345e4e9.html"/>
      <url>/post/3345e4e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-入门：安装与配置"><a href="#Docker-入门：安装与配置" class="headerlink" title="Docker | 入门：安装与配置"></a>Docker | 入门：安装与配置</h1><h2 id="Docker-和传统虚拟机区别"><a href="#Docker-和传统虚拟机区别" class="headerlink" title="Docker 和传统虚拟机区别"></a>Docker 和传统虚拟机区别</h2><p>对于传统虚拟机：<br>    虚拟出一套硬件，运行一个完整的操作系统，并在这个操作系统上安装和运行软件。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240428211106.png" alt=""><br>对于 Docker: 将一个个容器隔离开。<br>    容器内的应用直接运行在宿主机的内容，容器没有自己的内核。每个容器内都有一个属于自己的文件系统，互不影响。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240428211304.png" alt=""></p><h2 id="Docker-的基本组成"><a href="#Docker-的基本组成" class="headerlink" title="Docker 的基本组成"></a>Docker 的基本组成</h2><p>镜像(Image):类似于一个模板，通过它来创建容器服务。可以创建多个容器，并且最终服务运行或者项目运行就是在容器中。<br>容器(container):容器通过镜像来创建。Docker 通过容器技术，独立运行一个或一组应用。<br>仓库(repository):存放镜像的地方。</p><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h3 id="Linux-系统安装"><a href="#Linux-系统安装" class="headerlink" title="Linux 系统安装"></a>Linux 系统安装</h3><p><a href="https://docs.docker.com/engine/install/ubuntu/">官方文档</a></p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done</span><br></pre></td></tr></table></figure><h3 id="Add-Docker’s-official-GPG-key"><a href="#Add-Docker’s-official-GPG-key" class="headerlink" title="Add Docker’s official GPG key:"></a>Add Docker’s official GPG key:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure><h3 id="Add-the-repository-to-Apt-sources"><a href="#Add-the-repository-to-Apt-sources" class="headerlink" title="Add the repository to Apt sources:"></a>Add the repository to Apt sources:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装最新版-Docker-软件包"><a href="#安装最新版-Docker-软件包" class="headerlink" title="安装最新版 Docker 软件包"></a>安装最新版 Docker 软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>查看 Docker 是否安装成功<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240428231218.png" alt=""><br>测试 hello-world<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240428231030.png" alt=""><br>从上图可以看出。Docker run 做的事情：先寻找 hello-world 镜像，如果没找到，就去远程拉取。拉取成功后就运行，输出 Hello from Docker.</p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>会发现存在 hello-world 镜像。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240428231447.png" alt=""></p><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line">&#123; </span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https://ur5v53mu.mirror.aliyuncs.com&quot;] </span><br><span class="line">&#125; </span><br><span class="line">EOF </span><br><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 教程 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo魔改 | 添加 Valine 评论系统</title>
      <link href="/post/60917e5c.html"/>
      <url>/post/60917e5c.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo魔改-添加-Valine-评论系统"><a href="#hexo魔改-添加-Valine-评论系统" class="headerlink" title="hexo魔改 | 添加 Valine 评论系统"></a>hexo魔改 | 添加 Valine 评论系统</h1><p>在 LeanCloud 注册一个账号并登录 <a href="https://console.leancloud.cn/apps">https://console.leancloud.cn/apps</a><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240402204003.png" alt="image.png"></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240402204054.png" alt="image.png"><br>创建完成后，进入应用的界面<br>找到设置中 <strong>“应用凭证”</strong><br>我们需要用到 AppID、AppKey、服务器地址。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240402204229.png" alt="image.png"><br>打开 hexo 主题配置文件。<br>以 butterfly 为例<br>先将 Valine 启用<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240402204420.png" alt="image.png"><br>再在他下面找到 valine 的配置项hexo魔改 | 添加旋转小风车<br>将上面的 AppID、AppKey、服务器地址 分别填入 appID, appKey, serverURL<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240402204543.png" alt="image.png"><br>保存之后<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>三连。<br>进入网站测试<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240402204659.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo魔改系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> Valine </tag>
            
            <tag> 评论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题解决实录 | Python | Failed building wheel for matplotlib</title>
      <link href="/post/f849bb21.html"/>
      <url>/post/f849bb21.html</url>
      
        <content type="html"><![CDATA[<p>朋友遇到 python 安装 matplotlib 时的问题，笔者帮忙远程调试(踩了不少坑)。网上的解决方案有很多无效，以此来记录以下个人解决方案。<br>在使用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>出现如下报错：<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427174142.png" alt=""><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427174113.png" alt=""><br>“which is required to install pyproject.toml-based projects”<br>笔者尝试过使用以下指令无果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>进入 matplotlib 官网<br><a href="https://pypi.org/project/matplotlib/">https://pypi.org/project/matplotlib/</a><br>下载最新版 matplotlib<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427174448.png" alt=""></p><p>在文件夹下有 pyproject.toml 文件<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427174601.png" alt=""><br>终端进入该文件夹，并且在命令行输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyproject.toml</span><br></pre></td></tr></table></figure><br>(PS: 笔者看见过网上一个解决方案，用 poerty install 但是会有 build-system 的报错，就没有用了)。<br>当然这时候进行 install matplotlib 是没有用的。因为我们缺乏 Microsoft Visual C++ 14.0</p><p>因为缺乏 Microsoft Visual C++ 14.0,需要下载相应的 Build-Tools。最简单的方法是通过 Visual Studio Installer 下载。<br>进入官网并下载 Visual Studio.<br><a href="https://visualstudio.microsoft.com/zh-hans/#vs-section">https://visualstudio.microsoft.com/zh-hans/#vs-section</a><br>在软件安装界面选择 “使用 C++ 的桌面开发” 并保持右侧勾选项不变。等待其安装完毕。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240427175001.png" alt=""><br>此时再运行以下指令，未报错。安装成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install pyproject.toml</span><br><span class="line">pip install matplotlib</span><br><span class="line"></span><br><span class="line">python -i</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import matplotlib as plt</span></span><br></pre></td></tr></table></figure><br>(我不知道不在本文件夹下安装会不会出错，我是帮朋友弄完凭记忆写的文章，难免会有漏洞 &gt; _ &lt; )<br>如果该方案有误或者有更好的建议，欢迎交流~。</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决实录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决实录 </tag>
            
            <tag> matplotlib </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo魔改 | 修改首页卡片样式</title>
      <link href="/post/639f0c9.html"/>
      <url>/post/639f0c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo魔改-修改首页卡片样式"><a href="#hexo魔改-修改首页卡片样式" class="headerlink" title="hexo魔改 | 修改首页卡片样式"></a>hexo魔改 | 修改首页卡片样式</h1><h2 id="文章卡片效果预览"><a href="#文章卡片效果预览" class="headerlink" title="文章卡片效果预览"></a>文章卡片效果预览</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412214100.png" style="zoom: 50%"></p><h2 id="新建样式"><a href="#新建样式" class="headerlink" title="新建样式"></a>新建样式</h2><p>在主题文件夹下 source/css/ 中新建 color.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-announcement</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-recent-post</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-categories</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-tags</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-archives</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-webinfo</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在主题配置文件中 inject 的 head 下引入 css<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">    <span class="attr">head:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/color.css&quot;&gt;</span></span><br><span class="line">    <span class="attr">bottom:</span></span><br></pre></td></tr></table></figure></p><h2 id="侧边栏效果预览"><a href="#侧边栏效果预览" class="headerlink" title="侧边栏效果预览"></a>侧边栏效果预览</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412220233.png" style="zoom:50%"><br>以下的代码笔者均添加到 color.css 中了。</p><h3 id="让图片呈现圆角状"><a href="#让图片呈现圆角状" class="headerlink" title="让图片呈现圆角状"></a>让图片呈现圆角状</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加悬浮效果"><a href="#添加悬浮效果" class="headerlink" title="添加悬浮效果"></a>添加悬浮效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aside-list-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#50ccd5</span>; <span class="comment">/* 背景 */</span></span><br><span class="line">    <span class="attribute">color</span>: white; <span class="comment">/* 白色字体 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>; <span class="comment">/* 四个角为圆角 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.05</span>); <span class="comment">/* 略微放大 */</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.aside-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">time</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加过渡"><a href="#添加过渡" class="headerlink" title="添加过渡"></a>添加过渡</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.aside-list</span> &gt; <span class="selector-class">.aside-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease, color <span class="number">0.3s</span> ease,</span><br><span class="line">        border-radius <span class="number">0.3s</span> ease, transform <span class="number">0.2s</span> ease, padding-left <span class="number">0.3s</span> ease,</span><br><span class="line">        margin-left <span class="number">0.3s</span> ease; <span class="comment">/* 添加过渡效果 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="meta">!important</span>; <span class="comment">/* 让框框变大点 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终-css-代码"><a href="#最终-css-代码" class="headerlink" title="最终 css 代码"></a>最终 css 代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-announcement</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-recent-post</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-categories</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-tags</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-archives</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-webinfo</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#50ccd5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.aside-list</span> &gt; <span class="selector-class">.aside-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease, color <span class="number">0.3s</span> ease,</span><br><span class="line">        border-radius <span class="number">0.3s</span> ease, transform <span class="number">0.2s</span> ease, padding-left <span class="number">0.3s</span> ease,</span><br><span class="line">        margin-left <span class="number">0.3s</span> ease; <span class="comment">/* 添加过渡效果 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside-list-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#50ccd5</span>; <span class="comment">/* 蓝色背景 */</span></span><br><span class="line">    <span class="attribute">color</span>: white; <span class="comment">/* 白色字体 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>; <span class="comment">/* 四个角为圆角 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.05</span>); <span class="comment">/* 略微放大 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>; <span class="comment">/* 白色字体 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">time</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>; <span class="comment">/* 白色字体 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最重要的！"><a href="#最重要的！" class="headerlink" title="最重要的！"></a>最重要的！</h2><p>别忘了！<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> hexo魔改系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo魔改 | 修改首页文章数量</title>
      <link href="/post/cec4690b.html"/>
      <url>/post/cec4690b.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo魔改-修改文章数量"><a href="#hexo魔改-修改文章数量" class="headerlink" title="hexo魔改 | 修改文章数量"></a>hexo魔改 | 修改文章数量</h1><p>当我们首页文章数量大于 10 的时候，会发现出现分页情况。<br>然而首页下方还空着许多，和侧边栏明显不协调。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/b584c7a6449e74d0c4240dbc1a06f57.png" alt="b584c7a6449e74d0c4240dbc1a06f57.png"><br>笔者一开始在主题配置文件中找了半天，结果没找到相应的配置。<br>结果最终，它在博客文件夹根目录下的 config,yml<br>我们找到下面的(大约在第65行)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;&quot;</span><span class="string">hexo</span> <span class="string">修改文章数量</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><p>这个 <strong>per_page</strong> 属性也就是控制了每页的文章数量。我们将他修改为 16 或者更多。<br>最后-&gt;<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> hexo魔改系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习 | EECS 498-007 / 598-005 | Image Classification</title>
      <link href="/post/f1db88d.html"/>
      <url>/post/f1db88d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Image-Classification"><a href="#Image-Classification" class="headerlink" title="Image Classification"></a>Image Classification</h1><p><a href="https://en.wikipedia.org/wiki/Robustness">Robustness</a> 鲁棒性</p><h2 id="Edge-images"><a href="#Edge-images" class="headerlink" title="Edge images"></a>Edge images</h2><p><a href="https://en.wikipedia.org/wiki/Edge_detection">Edge Detection</a><br><a href="https://www.cnblogs.com/xyf327/p/14745908.html">有关边缘检测算法</a></p><h2 id="Image-Classification-1"><a href="#Image-Classification-1" class="headerlink" title="Image Classification:"></a>Image Classification:</h2><p>input: image<br>output: Assign image to one of a fixed set of categories.<br><strong>Problem</strong>: Semantic Gap(语义差距)<br>Object Detection:<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240406104140.png" style="zoom: 50%"><br>    One way to perform is via image classification of different sliding windows im the image. In a nutshell, it means classify different sub-regions of the image so we could look at s sub region over here and then classify it as background, horse, person, car or a truck…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">classify_image</span>(<span class="params">image</span>):</span><br><span class="line"><span class="comment"># Some magic here?</span></span><br><span class="line"><span class="keyword">return</span> class_label</span><br></pre></td></tr></table></figure><h2 id="Machine-Learning-Data-Driven-Approach"><a href="#Machine-Learning-Data-Driven-Approach" class="headerlink" title="Machine Learning:Data-Driven Approach"></a>Machine Learning:Data-Driven Approach</h2><ol><li>Collect a dataset of images and labels</li><li>Use Machine Learning to train a classifier</li><li>Evaluate the classifier on new images<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">images, labels</span>):</span><br><span class="line"><span class="comment"># Machine learning</span></span><br><span class="line"><span class="comment"># Memorize all data and labels</span></span><br><span class="line"><span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">model, test_images</span>):</span><br><span class="line"><span class="comment"># Use model to predict labels</span></span><br><span class="line"><span class="comment"># Predict the label of the most similar training image</span></span><br><span class="line"><span class="keyword">return</span> test_labels</span><br></pre></td></tr></table></figure><h2 id="Distance-Metric-to-compare-images"><a href="#Distance-Metric-to-compare-images" class="headerlink" title="Distance Metric to compare images"></a>Distance Metric to compare images</h2><h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离:"></a>曼哈顿距离:</h3><p><strong>L1(Manhattan) distance:</strong> $d_1(I_1,I_2) = \sum_p|I_1^p-I_2^p|$</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412191451.png" style="zoom: 50%"><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409085507.png" style="zoom:50%"></p><h2 id="Nearest-Neighbor-Decision-Boundaries"><a href="#Nearest-Neighbor-Decision-Boundaries" class="headerlink" title="Nearest Neighbor Decision Boundaries"></a>Nearest Neighbor Decision Boundaries</h2><p>Decision Boundarie is the boundary between two classification regions.<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409090934.png" style="zoom:50%"><br>Decision Boundarie can be nosiy; affected by outliers.<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409091231.png" style="zoom: 70%"></p><h2 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest Neighbors"></a>K-Nearest Neighbors</h2><h3 id="Using-more-neighbors-helps-smooth-out-rough-decision-boundaries"><a href="#Using-more-neighbors-helps-smooth-out-rough-decision-boundaries" class="headerlink" title="Using more neighbors helps smooth out rough decision boundaries."></a>Using more neighbors helps smooth out rough decision boundaries.</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409090850.png" style="zoom:75%"></p><h3 id="Using-more-neighbors-helps-reduce-the-effect-of-outliers"><a href="#Using-more-neighbors-helps-reduce-the-effect-of-outliers" class="headerlink" title="Using more neighbors helps reduce the effect of outliers."></a>Using more neighbors helps reduce the effect of outliers.</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409091528.png" style="zoom:75%"></p><h3 id="When-K-gt-1-there-can-be-ties-between-classes-Need-to-break-somehow"><a href="#When-K-gt-1-there-can-be-ties-between-classes-Need-to-break-somehow" class="headerlink" title="When K &gt; 1 there can be ties between classes. Need to break somehow!"></a>When K &gt; 1 there can be ties between classes. Need to break somehow!</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409091632.png" style="zoom:75%"><br>白色区域均有三个最近的邻居。</p><h3 id="欧几里得距离"><a href="#欧几里得距离" class="headerlink" title="欧几里得距离"></a>欧几里得距离</h3><p><strong>L2(Euclidean) distance</strong> = $d_2(I_1, I_2) = \sqrt{\sum_{p}(I_1^p - I_2^p) ^ 2}$</p><h3 id="Setting-Hyperparameters"><a href="#Setting-Hyperparameters" class="headerlink" title="Setting Hyperparameters"></a>Setting Hyperparameters</h3><p>Among the three ideas above, The best idea is <strong>Idea #3</strong><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412200840.png" alt="image.png"><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412201137.png" style="zoom: 50%"><br>当然，我们也可以将数据集划分为更多，以此更好估计我们的泛化性能。<br>也就是<strong>交叉验证</strong><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412201236.png" alt="image.png"><br>随着训练的数量越来越多<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412201717.png" style="zoom: 50%"><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412201741.png" style="zoom: 50%"><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412201753.png" style="zoom: 50%"><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240412201811.png" style="zoom: 50%"><br>We can see the nearest neighbor classifier performs well.</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> EECS 498-007 / 598-005 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一生一芯 | 状态机模型</title>
      <link href="/post/3296e98d.html"/>
      <url>/post/3296e98d.html</url>
      
        <content type="html"><![CDATA[<h1 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h1><p><strong>计算机系统都是状态机</strong></p><p>一个简单的计算机系统：程序直接在 CPU 上运行(无操作系统)<br>    <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240331002043.png" alt="image.png"><br>这三个抽象层次(程序、指令集、CPU) 都可以用状态机来理解。</p><h2 id="程序是个状态机："><a href="#程序是个状态机：" class="headerlink" title="程序是个状态机："></a>程序是个状态机：</h2><h3 id="C-语言的组成："><a href="#C-语言的组成：" class="headerlink" title="C 语言的组成："></a>C 语言的组成：</h3><pre><code>变量：计算的对象语句：计算的操作流程输入输出函数：让变量与外界交互</code></pre><h3 id="C-程序的状态机模型"><a href="#C-程序的状态机模型" class="headerlink" title="C 程序的状态机模型"></a>C 程序的状态机模型</h3><p><strong>状态集合</strong>：$S={&lt; V, PC &gt;}$<br>    <strong>V</strong> = $\{v1, v2, v3, …\} = 程序中所有变量的取值(包括全局变量和局部变量)$<br>    <strong>PC</strong> = 程序计数器 = 当前执行的语句位置<br><strong>激励事件</strong> $E = \{语句\}$<br>    执行 PC 指向的语句<br><strong>状态转移规则</strong>：<br>    $next: S \times E -&gt; S$<br>    语句的语义$(semantics)$<br><strong>初始状态</strong> $S_0=&lt; V_0,~ main 函数的第一条语句 &gt;$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1 **/</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">/* 2 **/</span><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* 3 **/</span><span class="type">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 4 **/</span><span class="type">int</span> z = x + y;</span><br><span class="line"><span class="comment">/* 5 **/</span><span class="built_in">printf</span>(<span class="string">&quot;z = %d\n&quot;</span>, z);</span><br><span class="line"><span class="comment">/* 6 **/</span><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 7 **/</span> &#125;</span><br></pre></td></tr></table></figure><p>对于的状态转移<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S = &lt;x, y, z, PC&gt;</span><br><span class="line">S0 = &lt;?, ?, ?, <span class="number">2</span>&gt; <span class="comment">// &#x27;?&#x27; 表示未初始化</span></span><br><span class="line">S0 = &lt;<span class="number">1</span>, ?, ?, <span class="number">3</span>&gt;</span><br><span class="line">S0 = &lt;<span class="number">1</span>, <span class="number">2</span>, ?, <span class="number">4</span>&gt;</span><br><span class="line">S0 = &lt;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&gt;</span><br><span class="line">S0 = &lt;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&gt; <span class="comment">// 输出 &quot;z = 3&quot;</span></span><br><span class="line">S0 = &lt;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, 结束&gt; </span><br></pre></td></tr></table></figure></p><h3 id="C-程序真的是从-main-第一条语句开始执行吗？"><a href="#C-程序真的是从-main-第一条语句开始执行吗？" class="headerlink" title="C 程序真的是从 $main()$ 第一条语句开始执行吗？"></a>C 程序真的是从 $main()$ 第一条语句开始执行吗？</h3><p>理解程序的动态行为 -&gt; trace 工具<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><br>再用 strace 工具<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c</span><br><span class="line">strace ./1.out</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409232712.png"/><br>我们发现它执行了许多操作，但事实上，这段代码只有简单的一行，并且直接 return 0; 如果真的从 main 函数开始执行，那么应该直接退出。所以我们猜测这些操作要么是在 main 函数执行之前做的，要么是在返回之后。<br>1.c 中我们加入死循环。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;<span class="keyword">while</span>(<span class="number">1</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><br>我们发现程序卡在了这里。说明是在 main 函数之前输出的<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409233134.png" alt="image.png"><br>说明了不是从 main() 函数第一条语句开始执行。</p><p>观察最初的 1.c<br>我们发现退出程序后还有一个 $exit\_group()$<br>实际上，程序并不是在 $return~0$ 之后结束，它还会执行一些额外的操作。</p><p>我们使用 gdb 调试工具。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb 1</span><br><span class="line">starti</span><br></pre></td></tr></table></figure><br>发现程序马上停在程序的开始。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240409233559.png" alt="image.png"><br>同时，这个 _start() 函数并不在我们 1.c 文件中，在别的地方，也说明不是从 main() 开始。</p><p>查看 ISO/IEC 9899:201x:<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410102808.png" alt="image.png"></p><p><strong>执行环境调用一个专门的 C 函数。</strong><br>执行环境有两种：独立环境 freestanding 和 宿主环境 hosted</p><h3 id="Freestanding-environment"><a href="#Freestanding-environment" class="headerlink" title="Freestanding environment"></a>Freestanding environment</h3><p>在独立环境下，这个专门的 C 函数由具体实现来决定。用它去调用 main 函数。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410102938.png" alt="image.png"></p><h3 id="Hosted-environment"><a href="#Hosted-environment" class="headerlink" title="Hosted environment"></a>Hosted environment</h3><p>在宿主环境下，这个专门的 C 函数名称为 main<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410102953.png" alt="image.png"><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410103041.png" alt="image.png"><br>手册定义了这个函数在宿主环境下叫 main</p><h3 id="Program-execution"><a href="#Program-execution" class="headerlink" title="Program execution"></a>Program execution</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410103600.png" alt="image.png"><br>可以看出一些语句的执行会引起副作用，导致执行环境的状态变化。由此可见，C 程序确实是一个状态机。</p><h2 id="CPU-是个状态机"><a href="#CPU-是个状态机" class="headerlink" title="CPU 是个状态机"></a>CPU 是个状态机</h2><p>CPU = 数字逻辑电路 = 状态机<br>数字逻辑电路 = 组合逻辑电路 + 时序逻辑电路<br><strong>状态集合</strong>：$S = \{&lt; 时序逻辑元件的值 &gt;\}$<br>    具体包括寄存器、存储器、触发器等<br><strong>激励事件</strong> $E = \{ 组合逻辑 \}$<br><strong>状态转移规则</strong>：<br>    $next: S \times E -&gt; S$<br>    由设计中的组合逻辑电路决定<br>    依据：架构师的设计文档<br><strong>初始状态</strong> $S_0 = &lt; 复位时时序逻辑元件的值  &gt;$<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410105912.png" alt="image.png"></p><h2 id="指令集是个状态机"><a href="#指令集是个状态机" class="headerlink" title="指令集是个状态机"></a>指令集是个状态机</h2><p>指令集是软件和硬件之间的接口。<br>指令集是一本手册规范，定义了 CPU 执行指令的行为。<br><strong>状态集合</strong>：$S = \{&lt; R, M &gt;\}$<br>    $R = \{PC, x_0, x_1, x_2, …\}$<br>    PC = 程序计数器 = 当前执行的指令位置<br>    M = 内存<br><strong>激励事件</strong> $E = \{ 指令 \}$<br>    执行 PC 指向的指令<br><strong>状态转移规则</strong>：<br>    $next: S \times E -&gt; S$<br>    指令的语义$(semantics)$<br><strong>初始状态</strong> $S_0 = &lt; R_0, M_0  &gt;$</p><h3 id="用-C-程序理解指令"><a href="#用-C-程序理解指令" class="headerlink" title="用 C 程序理解指令"></a>用 C 程序理解指令</h3><p>计算 1+2+…+100 的指令序列<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PC: instruction      | label: statement    </span></span><br><span class="line">    <span class="number">0</span>: li    x1,<span class="number">0</span>       |   pc0: x1 = <span class="number">0</span>;</span><br><span class="line">    <span class="number">1</span>: li    x2,<span class="number">0</span>       |   pc1: x2 = <span class="number">0</span>;</span><br><span class="line">    <span class="number">2</span>: li    x3,<span class="number">100</span>     |   pc2: x3 = <span class="number">100</span>;</span><br><span class="line">    <span class="number">3</span>: addi  x2,x2,<span class="number">1</span>    |   pc3: x2 = x2+<span class="number">1</span>;</span><br><span class="line">    <span class="number">4</span>: add   x1,x1,x2   |   pc4: x1 = x1+x2;</span><br><span class="line">    <span class="number">5</span>: blt   x2,x3,<span class="number">3</span>    |   pc5: <span class="keyword">if</span>(x2 &lt; x3) <span class="keyword">goto</span> pc3; <span class="comment">// branch if less than</span></span><br><span class="line">    <span class="number">6</span>: j     <span class="number">6</span>          |   pc6: <span class="keyword">goto</span> pc6;</span><br></pre></td></tr></table></figure><br>指令就是用来改变状态机状态的激励</p><h4 id="指令的两种表示"><a href="#指令的两种表示" class="headerlink" title="指令的两种表示"></a>指令的两种表示</h4><ol><li>符号化表示 - 面向程序员</li><li>编码表示 - 面向电路设计</li></ol><p>指令集手册实际上通过定义状态机进行状态转移的规则，来从概念上描述一台抽象计算机所具备的，程序可以使用的功能。</p><h2 id="程序如何在计算机上运行"><a href="#程序如何在计算机上运行" class="headerlink" title="程序如何在计算机上运行"></a>程序如何在计算机上运行</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410132319.png" alt="image.png"></p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>汇编指令 = 指令的符号化表示<br>汇编程序 = 驱动指令集状态机的输入<br>    执行汇编程序 = 指令集状态机发生状态转移</p><h3 id="CPU-结构设计"><a href="#CPU-结构设计" class="headerlink" title="CPU 结构设计"></a>CPU 结构设计</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410132538.png" alt="image.png"></p><h3 id="程序的运行"><a href="#程序的运行" class="headerlink" title="程序的运行"></a>程序的运行</h3><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410132711.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240410133112.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 一生一芯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一生一芯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo魔改 | 添加aplayer音乐播放器</title>
      <link href="/post/c0d75012.html"/>
      <url>/post/c0d75012.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-添加-aplayer-播放器"><a href="#hexo-添加-aplayer-播放器" class="headerlink" title="hexo 添加 aplayer 播放器"></a><strong>hexo 添加 aplayer 播放器</strong></h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>先安装插件 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在 hexo 的根目录配置文件 _config.yml 添加<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><br>再在主题配置文件中，以 _config.butterfly.yml 中找到  aplayerInject<br>将 enable, per_page 改为 true<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>再找到 inject 在 bottom 下面添加<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;2740999019&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;true&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">    <span class="attr">head:</span></span><br><span class="line">    <span class="attr">bottom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;2740999019&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;true&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><strong>这里的 data-id 对应相应音乐软件播放列表的 id</strong></p><p>以网易云为例子，在官网的界面打开，看链接可以找到 id<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240406194433.png" alt="image.png"></p><p>为了让切换页面之后音乐不会暂停。<br>在主题配置文件中启用 pjax<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>最后 hexo clean &amp; hexo g &amp; hexo s 三连，即可看到播放器。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240406194841.png" alt="image.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://butterfly.js.org/posts/507c070f/#%E6%8F%92%E5%85%A5-Aplayer-html">butterfly 官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo魔改系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> aplayer </tag>
            
            <tag> 音乐播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJU-ics | PA0:环境的配置</title>
      <link href="/post/f6ba7c15.html"/>
      <url>/post/f6ba7c15.html</url>
      
        <content type="html"><![CDATA[<h1 id="NJU-PA0"><a href="#NJU-PA0" class="headerlink" title="NJU PA0"></a>NJU PA0</h1><p>使用教程提供的源再进行sudo apt install … 可能会出现 Unmet dependencies 此类报错<br>可以安装 aptitude<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install aptitude</span><br><span class="line">sudo aptitude install &lt;package&gt;</span><br></pre></td></tr></table></figure><br>然后它会提示你，选 n 进行降级。再选 Y 确认<br>或者<br>将 /etc/apt/sources.list 下的源改为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><br>再输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p><p>对于 git，克隆 ssh 仓库<br>可能会遇到 ssh: connect to host github.com port 22: Connection refused 这样的报错<br>解决方案是在 ~/.ssh/config<br>如果没有则 touch ~/.ssh/config<br>vim ~/.ssh/config<br>在其中添加这几行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><br>然后再进行 git clone </p><p>当我们运行 make menuconfig<br>出现以下报错<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240321214235.png" alt="image.png"><br>我们需要安装这些缺少项<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bison</span><br></pre></td></tr></table></figure><br>再尝试输入 make<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240321214424.png" alt="image.png"><br>同理，安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flex</span><br></pre></td></tr></table></figure><br>即可正常编译</p>]]></content>
      
      
      <categories>
          
          <category> NJU-PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NJU-PA </tag>
            
            <tag> 计算机系统基础 </tag>
            
            <tag> ics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo魔改 | 添加旋转小风车</title>
      <link href="/post/e03cfb73.html"/>
      <url>/post/e03cfb73.html</url>
      
        <content type="html"><![CDATA[<p>打开 _config.butterfly.yml<br>找到 Beautify，将 enable 设置为 true，title-prefix-icon 设置为 ‘\f863’<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Beautify (美化頁面顯示)</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line">    <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f863&#x27;</span> <span class="comment"># &#x27;\f0c1&#x27;</span></span><br><span class="line">    <span class="attr">title-prefix-icon-color:</span> <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure><br>在主题文件夹 source/css/ 中创建一个 icon.css<br>内容如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章页H1-H6图标样式效果 */</span></span><br><span class="line"><span class="comment">/* 控制风车转动速度 4s那里可以自己调节快慢 */</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: ccc <span class="number">4s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: ccc <span class="number">4s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置风车颜色 */</span></span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ef50a8</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.55rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.23rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fb7061</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.35rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.12rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffbf00</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.22rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a9e000</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.05rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#57c850</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5ec1e0</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.66rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* s设置风车hover动效 6s那里可以自己调节快慢*/</span></span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: ccc <span class="number">6s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: ccc <span class="number">6s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并在 _config.butterfly.yml 中找到 inject，在 head 下添加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/<span class="attribute">icon</span><span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure><br>也就是<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># Insert the <span class="selector-tag">code</span> <span class="selector-tag">to</span> head (before &#x27;&lt;/head&gt;&#x27; tag) and the <span class="attribute">bottom</span> (before &#x27;&lt;/<span class="selector-tag">body</span>&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/<span class="selector-tag">body</span>&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">    head:</span><br><span class="line">        - &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/icon.css&quot;</span>&gt;</span><br><span class="line">    bottom:</span><br></pre></td></tr></table></figure></p><p>最后三连<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p><a href="https://zhuanlan.zhihu.com/p/584833753">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo魔改系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> 旋转小风车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法 | 动态规划 | 数字三角形模型</title>
      <link href="/post/9a8bfad7.html"/>
      <url>/post/9a8bfad7.html</url>
      
        <content type="html"><![CDATA[<h2 id="摘花生"><a href="#摘花生" class="headerlink" title="摘花生"></a>摘花生</h2><p><a href="https://www.acwing.com/problem/content/1017/">原题链接</a><br><div class="mermaid-wrap"><pre class="mermaid-src" hidden>   graph LR;id1((动态规划)) --&gt; 状态表示 --f[i,j] --&gt; 集合 --&gt; 所有从1,1走到i,j的路线  状态表示 --&gt; 属性 --&gt; MAX  id1((动态规划)) --&gt; 状态计算  </pre></div><br>状态计算：集合的划分。(很重要的划分依据：“最后”)<br>    集合划分依据：1.不重复(但并不是所有情况都要满足) 2.不漏<br>    <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240326232542.png" alt="image.png"></p><p>从 $(1,1)$ 走到 $(i, j)$ 的所有路线的最大值也就是 $f(n, m)$</p><p>$f[i, j] = max(f[i - 1, j], f[i, j - 1]) + w[i, j]$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r, c;</span><br><span class="line">        cin &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c; j ++)</span><br><span class="line">                cin &gt;&gt; w[i][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c; j ++)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]) + w[i][j];</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; f[r][c] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最低通行费"><a href="#最低通行费" class="headerlink" title="最低通行费"></a>最低通行费</h2><p><a href="https://www.acwing.com/problem/content/1020/">原题链接</a><br>从 “商人必须在 (2N−1) 个单位时间穿越出去。” 得出不能走回头路。<br>本质上和摘花生这题差不多<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N][N], f[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>)</span><br><span class="line">                f[i][j] = w[i][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">1</span>)</span><br><span class="line">                    f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j] + w[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">1</span>)</span><br><span class="line">                    f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][j - <span class="number">1</span>] + w[i][j]);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    cout &lt;&lt; f[n][n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N][N], f[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = w[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j] + w[i][j]);</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][j - <span class="number">1</span>] + w[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    cout &lt;&lt; f[n][n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NOIP2000-提高组-方格取数"><a href="#NOIP2000-提高组-方格取数" class="headerlink" title="[NOIP2000 提高组] 方格取数"></a>[NOIP2000 提高组] 方格取数</h2><p><a href="https://www.luogu.com.cn/problem/P1004">原题链接</a></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>   graph LR;id1((动态规划)) --&gt; 状态表示 --f[i1,j1,i2,j2] --&gt; 集合 --&gt; 所有从1,1与1,1分别走到i1,j1和i2,j2的路径  状态表示 --&gt; 属性 --&gt; MAX  id1((动态规划)) --&gt; 状态计算  </pre></div><p>同一个格子不能被重复选择。<br>只有在 i1 + j1 == i2 + j2 时，两条路径的格子才可能重合。<br>状态表示可以优化为：f[k, i1, i2]  表示所有从 (1, 1), (1, 1) 分别走到 (i1, k - i1), (i2, k - i2) 的路径的最大值。<br><div class="mermaid-wrap"><pre class="mermaid-src" hidden>   graph LR;id1((动态规划)) --&gt; 状态表示 --f[k, i1, i2] --&gt; 集合 --&gt; 所有从1,1和1,1分别走到i1,k-i1和i2,k-i2的路径  状态表示 --&gt; 属性 --&gt; MAX  id1((动态规划)) --&gt; 状态计算  </pre></div></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240327181205.png" style="zoom:70%"  ><br>第一种情况:<br>    第一条从 $(1, 1) -&gt; (i_1 - 1, j_1) -&gt; (i_1, j_1)$,<br>    第二条从 $(1, 1) -&gt; (i_2 - 1, j_2) -&gt; (i_2, j_2)$<br>    $f[k, i_1, i_2] = max(f[k, i_1, i_2], f[k - 1, i_1-1, i_2-1] + tmp)$<br>第二种情况：<br>    第一条从 $(1, 1) -&gt; (i_1 - 1, j_1) -&gt; (i_1, j_1)$,<br>    第二条从 $(1, 1) -&gt; (i_2, j_2 - 1) -&gt; (i_2, j_2)$<br>    $f[k, i_1, i_2] = max(f[k, i_1, i_2], f[k - 1, i_1-1, i_2] + tmp)$<br>第三种情况：<br>    第一条从 $(1, 1) -&gt; (i_1, j_1 - 1) -&gt; (i_1, j_1)$,<br>    第二条从 $(1, 1) -&gt; (i_2 - 1, j_2) -&gt; (i_2, j_2)$<br>    $f[k, i_1, i_2] = max(f[k, i_1, i_2], f[k - 1, i_1, i_2-1] + tmp)$<br>第四种情况：<br>    第一条从 $(1, 1) -&gt; (i_1, j_1 - 1) -&gt; (i_1, j_1)$,<br>    第二条从 $(1, 1) -&gt; (i_2, j_2 - 1) -&gt; (i_2, j_2)$<br>    $f[k, i_1, i_2] = max(f[k, i_1, i_2], f[k - 1, i_1, i_2] + tmp)$</p><p>如果两个格子重合 $tmp = w[i_1,j_1]$<br>    不重合则 $tmp = w[i_1, j_1] + w[i_2, j_2]$</p><p>$i_1==i_2$ 代表两个格子重合<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N * <span class="number">2</span>][N][N];</span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b &gt;&gt; c, a || b || c)</span><br><span class="line">        w[a][b] = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">2</span>; k &lt;= n + n; k ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i1 = <span class="number">1</span>; i1 &lt;= n; i1 ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i2 = <span class="number">1</span>; i2 &lt;= n; i2 ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> j1 = k - i1;</span><br><span class="line">                <span class="type">int</span> j2 = k - i2;</span><br><span class="line">                <span class="keyword">if</span>(j1 &gt;= <span class="number">1</span> &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= <span class="number">1</span> &amp;&amp; j2 &lt;= n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> tmp = w[i1][j1];</span><br><span class="line">                    <span class="keyword">if</span>(i1 != i2)</span><br><span class="line">                        tmp += w[i2][j2];</span><br><span class="line">                    <span class="type">int</span> &amp;ff = f[k][i1][i2];</span><br><span class="line">                    ff = <span class="built_in">max</span>(ff, f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2 - <span class="number">1</span>] + tmp);</span><br><span class="line">                    ff = <span class="built_in">max</span>(ff, f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2] + tmp);</span><br><span class="line">                    ff = <span class="built_in">max</span>(ff, f[k - <span class="number">1</span>][i1][i2 - <span class="number">1</span>] + tmp);</span><br><span class="line">                    ff = <span class="built_in">max</span>(ff, f[k - <span class="number">1</span>][i1][i2] + tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n + n][n][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs61B-sp21 | Project0:2048</title>
      <link href="/post/2b409a66.html"/>
      <url>/post/2b409a66.html</url>
      
        <content type="html"><![CDATA[<h1 id="Project0-2048"><a href="#Project0-2048" class="headerlink" title="Project0 2048"></a>Project0 2048</h1><p>cs61B 的第一个项目就是实现 2048 这个小游戏。如果思路清晰，写起来会比较轻松，大致用时1.5 - 2小时。</p><p>$\color{red}{笔者源代码在文末}$</p><h3 id="emptySpaceExists"><a href="#emptySpaceExists" class="headerlink" title="emptySpaceExists"></a>emptySpaceExists</h3><p>从描述可知，需要遍历板子，判断是否存在一个格子为空，如果找到一个，返回 return true，如果搜完未找到，则 return false;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns true if at least one space on the Board is empty.  </span></span><br><span class="line"><span class="comment"> *  Empty spaces are stored as null. **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如何获取板子的长度和宽度？</p><p>观察 Board 类，我们发现函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns the size of the board. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> values.length;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，调用 b.size() 即可获得板子的长度。<br>由此，我们可以写出大体框架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++)  &#123;        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++)  &#123;            </span><br><span class="line">    <span class="keyword">if</span>(...)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，if 判断框里面的条件就是 格子为空。观察 Board 类和 Tile 类</p><p>b.tile(col, row) 返回 Null 如果这个格子为空<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240324134631.png" alt="image.png"><br>因此，最终的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++)  &#123;        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++)  &#123;            </span><br><span class="line">    <span class="keyword">if</span>(b.tile(col, row) == <span class="literal">null</span>)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maxTileExists"><a href="#maxTileExists" class="headerlink" title="maxTileExists"></a>maxTileExists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Returns true if any tile is equal to the maximum valid value. * Maximum valid value is given by MAX_PIECE. Note that * given a Tile object t, we get its value with t.value(). */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 emptySpaceExists 类似，但是需要获取格子上的值。<br>在 Tile 类中。我们找到方法 value()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Return the value supplied to my constructor. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所以能写出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++)  &#123;        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++)  &#123;            </span><br><span class="line">    <span class="keyword">if</span>(b.tile(col, row).value() == MAX_PIECE)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然而，测试出错。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240324135352.png" alt="image.png"><br>因为没有考虑到空格子的问题。<br>所以我们加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(b.tile(col, row) == <span class="literal">null</span>)  </span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><br>最终的代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(b.tile(col, row) == <span class="literal">null</span>)  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            <span class="keyword">if</span>(b.tile(col, row).value() == MAX_PIECE)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="atLeastOneMoveExists"><a href="#atLeastOneMoveExists" class="headerlink" title="atLeastOneMoveExists"></a>atLeastOneMoveExists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Returns true if there are any valid moves on the board. * There are two ways that there can be valid moves: * 1. There is at least one empty space on the board. * 2. There are two adjacent tiles with the same value. */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回 true 的情况之一：</p><ol><li>至少存在一个空格子</li><li>至少有两个相邻格子的值相同<br>其中条件一也就是 emptySpaceExists 返回 true<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function. </span></span><br><span class="line">    <span class="keyword">if</span>(emptySpaceExists(b))  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>而是否存在两个相邻格子值相同。我们先遍历行列，取当前位置的格子，值记为 value_cur<br>从这个格子出发，遍历上下左右相邻格子。我们可以创建偏移数组，方便遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;  </span><br><span class="line"><span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>当然，还要判断新位置有无下标越界<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">if</span>(emptySpaceExists(b))  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">two</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;  </span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> b.size();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; size; row ++)&#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">value_cur</span> <span class="operator">=</span> b.tile(col, row).value();  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++)&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">cur_col</span> <span class="operator">=</span> col + dy[k];  </span><br><span class="line">                <span class="type">int</span> <span class="variable">cur_row</span> <span class="operator">=</span> row + dx[k];  </span><br><span class="line">                <span class="keyword">if</span>(cur_col &gt; <span class="number">0</span> &amp;&amp; cur_col &lt; size &amp;&amp; cur_row &gt; <span class="number">0</span> &amp;&amp; cur_row &lt; size &amp;&amp; b.tile(cur_col, cur_row).value() == value_cur)  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Building-the-Game-Logic"><a href="#Building-the-Game-Logic" class="headerlink" title="Building the Game Logic"></a>Building the Game Logic</h2><h3 id="tilt"><a href="#tilt" class="headerlink" title="tilt"></a>tilt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> changed;  </span><br><span class="line">    changed = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the  </span></span><br><span class="line">    <span class="comment">// changed local variable to true.  </span></span><br><span class="line">    checkGameOver();  </span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;  </span><br><span class="line">        setChanged();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> changed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先只考虑方向向上：<br>    我们可以考虑先将整个棋盘往上移动，让所有格子向上，填补掉格子上方的空格子，先不做合并处理。<br>    需要注意的一点是，棋盘左下角是(0, 0)。<br>    以列为基础。我们先从倒数第二行，从最上面一行的下面一行开始，向上搜寻有多少个空格子。然后再进行向上移动。同时，进行了移动需要将 changed 设置为 true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                    nulltile ++;  </span><br><span class="line">            &#125;            </span><br><span class="line">        board.move(col, row + nulltile, t);  </span><br><span class="line">            changed = <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后，我们对相同的格子进行合并，只考虑方向向上，那么就是 该位置的格子如果和它上一个格子的值相同，那么该格子向上移动，同时分数增加该格子值的两倍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++)&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row --)&#123;  </span><br><span class="line">        <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">        <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(col, row + <span class="number">1</span>);  </span><br><span class="line">            <span class="keyword">if</span>(t2 != <span class="literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  </span><br><span class="line">                board.move(col, row + <span class="number">1</span>, t1);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">                score += <span class="number">2</span> * t2.value();  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>到这里还没有结束，因为如果向上移动了，那么该格子又变成了空格子，所以我们又要重复之前的处理空格子的操作，整体向上移动。<br>结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> changed;  </span><br><span class="line">    changed = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> board.size();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">        board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row --)&#123;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(col, row + <span class="number">1</span>);  </span><br><span class="line">                <span class="keyword">if</span>(t2 != <span class="literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  </span><br><span class="line">                    board.move(col, row + <span class="number">1</span>, t1);  </span><br><span class="line">                    changed = <span class="literal">true</span>;  </span><br><span class="line">                    score += <span class="number">2</span> * t2.value();  </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">            board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the  </span></span><br><span class="line">    <span class="comment">// changed local variable to true.  </span></span><br><span class="line">    checkGameOver();  </span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;  </span><br><span class="line">        setChanged();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> changed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是上述代码只针对了方向向上。<br>官方提供了函数 $setViewingPerspective$，</p><blockquote><p>For this problem, we’ve given away a clean solution. This will allow you to handle the other three directions with only two additional lines of code! Specifically, the <code>Board</code> class has a <code>setViewingPerspective(Side s)</code> function that will change the behavior of the <code>tile</code> and <code>move</code> classes so that they _behave as if the given side was NORTH_.</p></blockquote><p>也就是我们现在操作前加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(side);</span><br></pre></td></tr></table></figure></p><p>当然，在最后还需要将视角恢复</p><blockquote><p>Important: Make sure to use <code>board.setViewingPerpsective</code> to set the perspective back to <code>Side.NORTH</code> before you finish your call to <code>tilt</code>, otherwise weird stuff will happen.</p></blockquote><p>最后添加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(Side.NORTH);</span><br></pre></td></tr></table></figure></p><p>最终代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> changed;  </span><br><span class="line">    changed = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> board.size();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(side);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">        board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row --)&#123;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(col, row + <span class="number">1</span>);  </span><br><span class="line">                <span class="keyword">if</span>(t2 != <span class="literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  </span><br><span class="line">                    board.move(col, row + <span class="number">1</span>, t1);  </span><br><span class="line">                    changed = <span class="literal">true</span>;  </span><br><span class="line">                    score += <span class="number">2</span> * t2.value();  </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">            board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(Side.NORTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the  </span></span><br><span class="line">    <span class="comment">// changed local variable to true.  </span></span><br><span class="line">    checkGameOver();  </span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;  </span><br><span class="line">        setChanged();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> changed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当然，两次填补空格子的操作是相同的。所以可以简化为一个函数。然后调用两次。<br>但是笔者不太会 java。</p><h2 id="Windows-可能运行时无法用方向键控制"><a href="#Windows-可能运行时无法用方向键控制" class="headerlink" title="Windows 可能运行时无法用方向键控制"></a>Windows 可能运行时无法用方向键控制</h2><p>进入 GUISource.java<br>将方向键替换为 W、D、S、A<br>如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (command) &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;W&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Up&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;D&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Right&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;S&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Down&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Left&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">default</span> :  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到此，就完成了第一个 project（耗时近 2 小时）</p><h3 id="笔者源代码"><a href="#笔者源代码" class="headerlink" title="笔者源代码"></a>笔者源代码</h3><p><a href="https://github.com/DaphneOdera17/cs61b-sp21/tree/main/proj0/game2048">点击此处</a></p>]]></content>
      
      
      <categories>
          
          <category> cs61B </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs61B </tag>
            
            <tag> 2048 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github | 解决ssh Connection refused</title>
      <link href="/post/aa87ba6f.html"/>
      <url>/post/aa87ba6f.html</url>
      
        <content type="html"><![CDATA[<h1 id="ssh-connect-to-host-github-com-port-22-Connection-refused"><a href="#ssh-connect-to-host-github-com-port-22-Connection-refused" class="headerlink" title="ssh: connect to host github.com port 22: Connection refused"></a>ssh: connect to host github.com port 22: Connection refused</h1><p>默认配置文件在 ~/.ssh/config<br>如果没有则 touch ~/.ssh/config</p><p>vim ~/.ssh/config<br>在其中添加这几行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github | 配置SSH</title>
      <link href="/post/790c8b8.html"/>
      <url>/post/790c8b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github-SSH"><a href="#Github-SSH" class="headerlink" title="$Github-SSH$"></a>$Github-SSH$</h1><p>在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>生成密钥</p><p>默认在 $\sim/.ssh$ 文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>会生成 $id\_rsa$ 和 $id\_rsa.pub$ 这两个文件 </p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309183457913.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309183611993.png" alt=""></p><p>再将这一串密钥复制下来</p><p>登陆到 <a href="https://github.com/settings/keys">SSH and GPG keys</a> 该链接</p><p>点击 $New~SSH~key$</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309183930916.png" alt=""></p><p>在该界面下输入密钥的名字，在 $Key$ 栏中粘贴刚才复制的密钥</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309184004773.png" alt=""></p><p>点击 $Add~SSH~key$ 即可添加成功</p><p>在终端，可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>来测试能否连接</p><p>克隆仓库的 $SSH$ 地址</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309184330682.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:...</span><br></pre></td></tr></table></figure><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法 | 时空复杂度</title>
      <link href="/post/c689e876.html"/>
      <url>/post/c689e876.html</url>
      
        <content type="html"><![CDATA[<h1 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>评测机大概 $1s$ 最多运行 $1$ 亿次，即 $1e8$​</p><p>时间复杂度一般小于 $1e7 \sim 1e8$ 就可以</p><p>$2^{20} ≈ 10^6$</p><p>$2^{16} = 65536$</p><p>$2^{15} = 32768$</p><p>$2^{63} = 10^{18}$</p><h2 id="根据数据范围反推算法复杂度及算法"><a href="#根据数据范围反推算法复杂度及算法" class="headerlink" title="根据数据范围反推算法复杂度及算法"></a>根据数据范围反推算法复杂度及算法</h2><p>源自 $y$ 总，指路：<a href="https://www.acwing.com/blog/content/32/">原文链接</a></p><ol><li>$n \le 30$, 指数级别, $dfs$+剪枝，状态压缩$dp$</li><li>$n \le 100$ =&gt; $O(n^3)$，$floyd，dp，$高斯消元</li><li>$n \le 1000$ =&gt; $O(n^2)$，$O(n^2logn)$，$dp$，二分，朴素版$Dijkstra$、朴素版$Prim$、$Bellman-Ford$</li><li>$n \le 10000$ =&gt; $O(n * \sqrt n)$，块状链表、分块、莫队</li><li>$n \le 100000$ =&gt; $O(nlogn)$ =&gt; 各种$sort$，线段树、树状数组、$set/map$、$heap$、拓扑排序、$dijkstra+heap$、$prim+heap$、$Kruskal$、$spfa$、求凸包、求半平面交、二分、$CDQ$分治、整体二分、后缀数组、树链剖分、动态树</li><li>$n \le 1000000$ =&gt; $O(n)$, 以及常数较小的 $O(nlogn)$ 算法 =&gt; 单调队列、 $hash$、双指针扫描、$BFS$、并查集，$kmp$、$AC$自动机，常数比较大的 $O(nlogn)$ 的做法：$sort$、树状数组、$heap$、$dijkstra$、$spfa$</li><li>$n \le 10000000$ =&gt; $O(n)$，双指针扫描、$kmp$、$AC$自动机、线性筛素数</li><li>$n \le 10^9$ =&gt; $O(\sqrt n)$，判断质数</li><li>$n \le 10^{18}$ =&gt; $O(logn)$，最大公约数，快速幂，数位$DP$</li><li>$n \le 10^{1000}$ =&gt; $O((logn)^2)$，高精度加减乘除</li><li>$n \le 10^{100000}$ =&gt; $O(logk \times loglogk)，k$表示位数，高精度加减、$FFT/NTT$</li></ol><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>对于空间复杂度</p><p>$int ~ =~4 ~ Byte$</p><p>$char ~ =~1 ~ Byte$</p><p>$long~ long ~ =~8 ~ Byte$</p><p>$float ~ =~4 ~ Byte$</p><p>$double ~ =~8 ~ Byte$</p><p>$64MB = 6\times 2^{20}Byte = 6.4 \times 10^{7} Byte$</p><p>可以开 $1.6 \times 10^{7}$ 个 $int$</p><h2 id="数据量对于输入输出的影响"><a href="#数据量对于输入输出的影响" class="headerlink" title="数据量对于输入输出的影响"></a>数据量对于输入输出的影响</h2><p>$n &lt; 10^5$ 时，用  $scanf,printf,cin,cout$ 差不多</p><p>$n \ge 10^5$ 时，用 $scanf,printf$</p><p>如果想用 $cin, cout$，需要关闭同步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科普 | base64编码</title>
      <link href="/post/e4aae5e6.html"/>
      <url>/post/e4aae5e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Base64-编码"><a href="#Base64-编码" class="headerlink" title="$Base64$ 编码"></a>$Base64$ 编码</h1><p><a href="https://en.wikipedia.org/wiki/Base64">Wiki</a></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121092628109.png" alt="base64编码表"></p><p>$Base64$ 用 $6$ 位表示</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121091417546.png" alt=""></p><p>将  $echo$ “$HelloWorld$” 的结果作为 $Base64$ 命令的输入来执行一个 $Base64$ 编码操作</p><h2 id="编码的原理和过程"><a href="#编码的原理和过程" class="headerlink" title="编码的原理和过程"></a>编码的原理和过程</h2><h4 id="1-转换编码对象为二进制"><a href="#1-转换编码对象为二进制" class="headerlink" title="1.转换编码对象为二进制"></a>1.转换编码对象为二进制</h4><p>$H：01001000$</p><p>$e：01100101$</p><p>$l：01101100$</p><p>$l：01101100$</p><p>$o：01101111$</p><p>$W：01010111$</p><p>$o：01101111$</p><p>$r：01110010$</p><p>$l：01101100$</p><p>$d：01100100$</p><p>$\n：00001010$$</p><p>再将二进制位从左往右排列，得到字符串的二进制表示</p><h4 id="2-把二进制的字符串按照每六位一组来分组"><a href="#2-把二进制的字符串按照每六位一组来分组" class="headerlink" title="2.把二进制的字符串按照每六位一组来分组"></a>2.把二进制的字符串按照每六位一组来分组</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121091749052.png" alt=""></p><p>如果最后一组二进制位不足 $6$ 位，用 $0$ 来补齐</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121091857123.png" alt=""></p><h4 id="3-把每一组的二进制位转换成十进制的数字并映射"><a href="#3-把每一组的二进制位转换成十进制的数字并映射" class="headerlink" title="3.把每一组的二进制位转换成十进制的数字并映射"></a>3.把每一组的二进制位转换成十进制的数字并映射</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121092008188.png" alt=""></p><p>就得到了编码之后的结果</p><p>$SGVsbG9Xb3JsZAo$</p><p>但是需要注意的是，$\textcolor{red}{编码之后的长度必须为 4 的倍数}$</p><p>如果不是的话，需要在结尾的位置用 $=$ 来补齐。</p><p>因此，结果为</p><p>$SGVsbG9Xb3JsZAo=$</p><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121092530681.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>个人随想录</title>
      <link href="/artitalk/index.html"/>
      <url>/artitalk/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="🛠️技能"><a href="#🛠️技能" class="headerlink" title="🛠️技能"></a>🛠️技能</h2><div style="text-align:center">    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/C%2B%2B.png" style="zoom:15%;float:left">    </span>    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/C.png" style="zoom:15%;float:left">    </span>    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/Java.png" style="zoom:15%;float:left">    </span>    <span style="width:20%;display:inline-block">    <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/Python.png" style="zoom:15%;float:left"></span><br></div><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><div style="text-align:center">    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/HTML.png" style="zoom:15%;float:left">    </span>    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/Vue.png" style="zoom:15%;float:left">    </span>    <br>    <br></div><h2 id="感兴趣的"><a href="#感兴趣的" class="headerlink" title="感兴趣的"></a>感兴趣的</h2><div style="text-align:center">    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/Rust.png" style="zoom:15%;float:left">    </span>    <span style="width:20%;display:inline-block">        <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/Raspberry%20Pi.png" style="zoom:15%;float:left">    </span>    <br>    <br></div><h2 id="My-GitHub"><a href="#My-GitHub" class="headerlink" title="My GitHub"></a>My GitHub</h2><div style="text-align:center">    <span style="width:20%;display:inline-block">        <a href="https://github.com/DaphneOdera17">            <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/Github.png" style="zoom:15%">        </a>    </span>    <br></div><h2 id="📈-Stats"><a href="#📈-Stats" class="headerlink" title="📈 Stats"></a>📈 Stats</h2><div style="text-align:center">    <a href="https://github.com/anuraghazra/github-readme-stats">  <img height=200 align="center" src="https://github-readme-stats.vercel.app/api?username=DaphneOdera17&show_icons=true&rank_icon=github&include_all_commits=true"/></a><a href="https://github.com/anuraghazra/convoychat">  <img height=200 align="center" src="https://github-readme-stats.vercel.app/api/top-langs?username=DaphneOdera17&layout=compact&langs_count=8&card_width=320" /></a></div><h2 id="🔗-Links"><a href="#🔗-Links" class="headerlink" title="🔗 Links"></a>🔗 Links</h2><p><a href="https://www.birdyweb.top">My own website</a><br><a href="https://blog.csdn.net/DaphneOdera17">CSDN</a><br><a href="https://stackoverflow.com/users/22276736/birdy"><br>  <img src="https://img.shields.io/badge/stackoverflow-F58025?logo=stackoverflow&logoColor=white" style="float:left"></a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>books</title>
      <link href="/books/index.html"/>
      <url>/books/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/background.css"/>
      <url>/css/background.css</url>
      
        <content type="html"><![CDATA[/* 文章页背景 */.layout_post > #post {/* 以下代表透明度为0.7 可以自行修改*/background: rgba(255, 255, 255, 0.9);}/* 所有页面背景 */#aside_content .card-widget,#recent-posts > .recent-post-item,.layout_page > div:first-child:not(.recent-posts),.layout_post > #page,.layout_post > #post,.read-mode .layout_post > #post {/* 以下代表透明度为0.7 */background: rgba(255, 255, 255, 0.9);}/*侧边卡片的透明度 */:root {--card-bg: rgba(255, 255, 255, 0.9);}/* 页脚透明 */#footer {/* 以下代表透明度为0.7 */background: rgba(255, 255, 255, 0.9);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>个人随想录</title>
      <link href="/essay/index.html"/>
      <url>/essay/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/modify.css"/>
      <url>/css/modify.css</url>
      
        <content type="html"><![CDATA[#page-header,#page-header:before {  background: transparent !important;}#page-header.post-bg,#page-header.not-home-page {  height: 280px !important;}#page-header #post-info {  bottom: 40px !important;}#page-header #page-site-info {  top: 140px !important;}@media screen and (max-width: 768px) {  #page-header.not-home-page {    height: 200px !important;  }  #page-header #post-info {    bottom: 10px !important;  }  #page-header #page-site-info {    top: 100px !important;  }}.top-img {  height: 250px;  margin: -50px -40px 50px;  border-top-left-radius: inherit;  border-top-right-radius: inherit;  background-position: center center;  background-size: cover;  -webkit-transition: all 0.3s;  -moz-transition: all 0.3s;  -o-transition: all 0.3s;  -ms-transition: all 0.3s;  transition: all 0.3s;}@media screen and (max-width: 768px) {  .top-img {    height: 230px;    margin: -36px -14px 36px;  }}[data-theme='dark'] .top-img {  filter: brightness(0.8);}#footer:before {  background-color: rgba(255,255,255,0.5);}[data-theme='dark'] #footer:before {  background-color: rgba(0,0,0,0.5);}#footer-wrap,#footer-wrap a {  color: #111;  -webkit-transition: unset;  -moz-transition: unset;  -o-transition: unset;  -ms-transition: unset;  transition: unset;}[data-theme='dark'] #footer-wrap,[data-theme='dark'] #footer-wrap a {  color: var(--light-grey);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<!-- 播放器 --><div class="music-player"><!-- audio标签 --><audio class="music-player__audio" ></audio><!-- 播放器主体 --><div class="music-player__main"><!-- 模糊背景 --><div class="music-player__blur"></div><!-- 唱片 --><div class="music-player__disc"><!-- 唱片图片 --><div class="music-player__image"><img width="100%" src="" alt=""></div><!-- 指针 --><div class="music-player__pointer"><img width="100%" src="/img/cd_tou.png" alt=""></div></div><!-- 控件主体 --><div class="music-player__controls"><!-- 歌曲信息 --><div class="music__info"><h3 class="music__info--title">...</h3></div><!-- 控件... --><div class="player-control"><div class="player-control__content"><div class="player-control__btns"><div class="player-control__btn player-control__btn--prev"><i class="iconfont icon-prev"></i></div><div class="player-control__btn player-control__btn--play"><i class="iconfont icon-play"></i></div><div class="player-control__btn player-control__btn--next"><i class="iconfont icon-next"></i></div><div class="player-control__btn player-control__btn--mode"><i class="iconfont icon-random"></i></div></div><div class="player-control__volume"><div class="control__volume--icon player-control__btn"><i class="iconfont icon-volume"></i></div><div class="control__volume--progress progress"></div></div></div><div class="player-control__content"><div class="player__song--progress progress"></div><div class="player__song--timeProgess nowTime">00:00</div><div class="player__song--timeProgess totalTime">00:00</div></div></div></div></div><!-- 歌曲列表 --><div class="music-player__list"><ul class="music__list_content"></ul></div></div><script src="/js/utill.js"></script><script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.slim.min.js"></script><script src="/js/player.js?10"></script><div style="text-align:center;margin:-100px 0; font:normal 14px/24px 'MicroSoft YaHei';color:#ffffff"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/modify.js"/>
      <url>/js/modify.js</url>
      
        <content type="html"><![CDATA['use strict';const cheerio = require('cheerio');/** * 在页面插入新顶部图 * @param {cheerio.Root} $ Root */function insertTopImg($) {    let header = $('#page-header');    if (header.length === 0) return;    let background = header.css('background-image');    if (!background) return;    $('#post, #page, #archive, #tag, #category').prepend(`<div class="top-img" style="background-image: ${background};"></div>`);}hexo.extend.filter.register('after_render:html', function(str, data) {    let $ = cheerio.load(str, {        decodeEntities: false    });    insertTopImg($);    return $.html();});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>个人随想录</title>
      <link href="/talk/index.html"/>
      <url>/talk/index.html</url>
      
        <content type="html"><![CDATA[<head>  <script src="https://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script></head><body>      <img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240406235836.png">      <!-- 引用 artitalk -->      <script type="text/javascript" src="https://unpkg.com/artitalk"></script>      <!-- 存放说说的容器 -->      <div id="artitalk_main"></div>      <script>      new Artitalk({          appId: 'io9zpiEMivhCI0bTijyctNGY-MdYXbMMI', // Your LeanCloud appId          appKey: 'Fxtw4McQ0lRMQ4jKyk4AInWj' // Your LeanCloud appKey      })      </script></body>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
