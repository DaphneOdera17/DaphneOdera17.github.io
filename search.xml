<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cs61B-sp21 project0 2048</title>
      <link href="/post/2b409a66.html"/>
      <url>/post/2b409a66.html</url>
      
        <content type="html"><![CDATA[<h1 id="Project0-2048"><a href="#Project0-2048" class="headerlink" title="Project0 2048"></a>Project0 2048</h1><p>cs61B 的第一个项目就是实现 2048 这个小游戏。如果思路清晰，写起来会比较轻松，大致用时1.5 - 2小时。</p><p>$\color{red}{笔者源代码在文末}$</p><h3 id="emptySpaceExists"><a href="#emptySpaceExists" class="headerlink" title="emptySpaceExists"></a>emptySpaceExists</h3><p>描述:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns true if at least one space on the Board is empty.  </span></span><br><span class="line"><span class="comment"> *  Empty spaces are stored as null. **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可知，需要遍历板子，判断是否存在一个格子为空，如果找到一个，返回 return true，如果搜完未找到，则 return false;<br>如何获取板子的长度和宽度？<br>观察 Board 类，我们发现函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns the size of the board. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> values.length;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所以，调用 b.size() 即可获得板子的长度。<br>由此，我们可以写出大体框架。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++)  &#123;        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++)  &#123;            </span><br><span class="line">    <span class="keyword">if</span>(...)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可见，if 判断框里面的条件就是 格子为空。观察 Board 类和 Tile 类<br>b.tile(col, row) 返回 Null 如果这个格子为空<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240324134631.png" alt="image.png"><br>因此，最终的代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++)  &#123;        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++)  &#123;            </span><br><span class="line">    <span class="keyword">if</span>(b.tile(col, row) == <span class="literal">null</span>)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="maxTileExists"><a href="#maxTileExists" class="headerlink" title="maxTileExists"></a>maxTileExists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Returns true if any tile is equal to the maximum valid value. * Maximum valid value is given by MAX_PIECE. Note that * given a Tile object t, we get its value with t.value(). */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 emptySpaceExists 类似，但是需要获取格子上的值。<br>在 Tile 类中。我们找到方法 value()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Return the value supplied to my constructor. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所以能写出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++)  &#123;        </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++)  &#123;            </span><br><span class="line">    <span class="keyword">if</span>(b.tile(col, row).value() == MAX_PIECE)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然而，测试出错。<br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240324135352.png" alt="image.png"><br>因为没有考虑到空格子的问题。<br>所以我们加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(b.tile(col, row) == <span class="literal">null</span>)  </span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><br>最终的代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; b.size(); col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; b.size(); row ++) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(b.tile(col, row) == <span class="literal">null</span>)  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            <span class="keyword">if</span>(b.tile(col, row).value() == MAX_PIECE)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="atLeastOneMoveExists"><a href="#atLeastOneMoveExists" class="headerlink" title="atLeastOneMoveExists"></a>atLeastOneMoveExists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Returns true if there are any valid moves on the board. * There are two ways that there can be valid moves: * 1. There is at least one empty space on the board. * 2. There are two adjacent tiles with the same value. */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回 true 的情况之一：</p><ol><li>至少存在一个空格子</li><li>至少有两个相邻格子的值相同<br>其中条件一也就是 emptySpaceExists 返回 true<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function. </span></span><br><span class="line">    <span class="keyword">if</span>(emptySpaceExists(b))  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>而是否存在两个相邻格子值相同。我们先遍历行列，取当前位置的格子，值记为 value_cur<br>从这个格子出发，遍历上下左右相邻格子。我们可以创建偏移数组，方便遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;  </span><br><span class="line"><span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>当然，还要判断新位置有无下标越界<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Fill in this function.  </span></span><br><span class="line">    <span class="keyword">if</span>(emptySpaceExists(b))  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">two</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;  </span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> b.size();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; size; row ++)&#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">value_cur</span> <span class="operator">=</span> b.tile(col, row).value();  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++)&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">cur_col</span> <span class="operator">=</span> col + dy[k];  </span><br><span class="line">                <span class="type">int</span> <span class="variable">cur_row</span> <span class="operator">=</span> row + dx[k];  </span><br><span class="line">                <span class="keyword">if</span>(cur_col &gt; <span class="number">0</span> &amp;&amp; cur_col &lt; size &amp;&amp; cur_row &gt; <span class="number">0</span> &amp;&amp; cur_row &lt; size &amp;&amp; b.tile(cur_col, cur_row).value() == value_cur)  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Building-the-Game-Logic"><a href="#Building-the-Game-Logic" class="headerlink" title="Building the Game Logic"></a>Building the Game Logic</h2><h3 id="tilt"><a href="#tilt" class="headerlink" title="tilt"></a>tilt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> changed;  </span><br><span class="line">    changed = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the  </span></span><br><span class="line">    <span class="comment">// changed local variable to true.  </span></span><br><span class="line">    checkGameOver();  </span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;  </span><br><span class="line">        setChanged();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> changed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先只考虑方向向上：<br>    我们可以考虑先将整个棋盘往上移动，让所有格子向上，填补掉格子上方的空格子，先不做合并处理。<br>    需要注意的一点是，棋盘左下角是(0, 0)。<br>    以列为基础。我们先从倒数第二行，从最上面一行的下面一行开始，向上搜寻有多少个空格子。然后再进行向上移动。同时，进行了移动需要将 changed 设置为 true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">        <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                    nulltile ++;  </span><br><span class="line">            &#125;            </span><br><span class="line">        board.move(col, row + nulltile, t);  </span><br><span class="line">            changed = <span class="literal">true</span>;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后，我们对相同的格子进行合并，只考虑方向向上，那么就是 该位置的格子如果和它上一个格子的值相同，那么该格子向上移动，同时分数增加该格子值的两倍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++)&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row --)&#123;  </span><br><span class="line">        <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">        <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(col, row + <span class="number">1</span>);  </span><br><span class="line">            <span class="keyword">if</span>(t2 != <span class="literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  </span><br><span class="line">                board.move(col, row + <span class="number">1</span>, t1);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">                score += <span class="number">2</span> * t2.value();  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>到这里还没有结束，因为如果向上移动了，那么该格子又变成了空格子，所以我们又要重复之前的处理空格子的操作，整体向上移动。<br>结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> changed;  </span><br><span class="line">    changed = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> board.size();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">        board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row --)&#123;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(col, row + <span class="number">1</span>);  </span><br><span class="line">                <span class="keyword">if</span>(t2 != <span class="literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  </span><br><span class="line">                    board.move(col, row + <span class="number">1</span>, t1);  </span><br><span class="line">                    changed = <span class="literal">true</span>;  </span><br><span class="line">                    score += <span class="number">2</span> * t2.value();  </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">            board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the  </span></span><br><span class="line">    <span class="comment">// changed local variable to true.  </span></span><br><span class="line">    checkGameOver();  </span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;  </span><br><span class="line">        setChanged();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> changed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是上述代码只针对了方向向上。<br>官方提供了函数 $setViewingPerspective$，</p><blockquote><p>For this problem, we’ve given away a clean solution. This will allow you to handle the other three directions with only two additional lines of code! Specifically, the <code>Board</code> class has a <code>setViewingPerspective(Side s)</code> function that will change the behavior of the <code>tile</code> and <code>move</code> classes so that they _behave as if the given side was NORTH_.</p></blockquote><p>也就是我们现在操作前加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(side);</span><br></pre></td></tr></table></figure></p><p>当然，在最后还需要将视角恢复</p><blockquote><p>Important: Make sure to use <code>board.setViewingPerpsective</code> to set the perspective back to <code>Side.NORTH</code> before you finish your call to <code>tilt</code>, otherwise weird stuff will happen.</p></blockquote><p>最后添加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(Side.NORTH);</span><br></pre></td></tr></table></figure></p><p>最终代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> changed;  </span><br><span class="line">    changed = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> board.size();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(side);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">        board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row --)&#123;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t1</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t2</span> <span class="operator">=</span> board.tile(col, row + <span class="number">1</span>);  </span><br><span class="line">                <span class="keyword">if</span>(t2 != <span class="literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  </span><br><span class="line">                    board.move(col, row + <span class="number">1</span>, t1);  </span><br><span class="line">                    changed = <span class="literal">true</span>;  </span><br><span class="line">                    score += <span class="number">2</span> * t2.value();  </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; size; col ++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> size - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row--) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">nulltile</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);  </span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row_before</span> <span class="operator">=</span> row + <span class="number">1</span>; row_before &lt; size; row_before ++)&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(tile(col, row_before) == <span class="literal">null</span>)  </span><br><span class="line">                        nulltile ++;  </span><br><span class="line">                &#125;                </span><br><span class="line">            board.move(col, row + nulltile, t);  </span><br><span class="line">                changed = <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(side != Side.NORTH)  </span><br><span class="line">    board.setViewingPerspective(Side.NORTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the  </span></span><br><span class="line">    <span class="comment">// changed local variable to true.  </span></span><br><span class="line">    checkGameOver();  </span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;  </span><br><span class="line">        setChanged();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> changed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当然，两次填补空格子的操作是相同的。所以可以简化为一个函数。然后调用两次。<br>但是笔者不太会 java。</p><h2 id="Windows-可能运行时无法用方向键控制"><a href="#Windows-可能运行时无法用方向键控制" class="headerlink" title="Windows 可能运行时无法用方向键控制"></a>Windows 可能运行时无法用方向键控制</h2><p>进入 GUISource.java<br>将方向键替换为 W、D、S、A<br>如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (command) &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;W&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Up&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;D&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Right&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;S&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Down&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span> :  </span><br><span class="line">        command = <span class="string">&quot;Left&quot;</span>;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    <span class="keyword">default</span> :  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到此，就完成了第一个 project（耗时近 2 小时）</p><h3 id="笔者源代码"><a href="#笔者源代码" class="headerlink" title="笔者源代码"></a>笔者源代码</h3><p><a href="https://github.com/DaphneOdera17/cs61b-sp21/tree/main/proj0/game2048">点击此处</a></p>]]></content>
      
      
      <categories>
          
          <category> cs61B </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs61B </tag>
            
            <tag> 2048 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ssh: connect to host github.com port 22: Connection refused</title>
      <link href="/post/aa87ba6f.html"/>
      <url>/post/aa87ba6f.html</url>
      
        <content type="html"><![CDATA[<h1 id="ssh-connect-to-host-github-com-port-22-Connection-refused"><a href="#ssh-connect-to-host-github-com-port-22-Connection-refused" class="headerlink" title="ssh: connect to host github.com port 22: Connection refused"></a>ssh: connect to host github.com port 22: Connection refused</h1><p>默认配置文件在 ~/.ssh/config<br>如果没有则 touch ~/.ssh/config</p><p>vim ~/.ssh/config<br>在其中添加这几行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><br><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/20240319163811.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github配置SSH</title>
      <link href="/post/790c8b8.html"/>
      <url>/post/790c8b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github-SSH"><a href="#Github-SSH" class="headerlink" title="$Github-SSH$"></a>$Github-SSH$</h1><p>在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>生成密钥</p><p>默认在 $\sim/.ssh$ 文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>会生成 $id_rsa$ 和 $id_rsa.pub$ 这两个文件 </p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309183457913.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309183611993.png" alt=""></p><p>再将这一串密钥复制下来</p><p>登陆到 <a href="https://github.com/settings/keys">SSH and GPG keys</a> 该链接</p><p>点击 $New~SSH~key$</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309183930916.png" alt=""></p><p>在该界面下输入密钥的名字，在 $Key$ 栏中粘贴刚才复制的密钥</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309184004773.png" alt=""></p><p>点击 $Add~SSH~key$ 即可添加成功</p><p>在终端，可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>来测试能否连接</p><p>克隆仓库的 $SSH$ 地址</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240309184330682.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:...</span><br></pre></td></tr></table></figure><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时空复杂度</title>
      <link href="/post/c689e876.html"/>
      <url>/post/c689e876.html</url>
      
        <content type="html"><![CDATA[<h1 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>评测机大概 $1s$ 最多运行 $1$ 亿次，即 $1e8$​</p><p>时间复杂度一般小于 $1e7 \sim 1e8$ 就可以</p><p>$2^{20} ≈ 10^6$</p><p>$2^{16} = 65536$</p><p>$2^{15} = 32768$</p><p>$2^{63} = 10^{18}$</p><h2 id="根据数据范围反推算法复杂度及算法"><a href="#根据数据范围反推算法复杂度及算法" class="headerlink" title="根据数据范围反推算法复杂度及算法"></a>根据数据范围反推算法复杂度及算法</h2><p>源自 $y$ 总，指路：<a href="https://www.acwing.com/blog/content/32/">原文链接</a></p><ol><li>$n \le 30$, 指数级别, $dfs$+剪枝，状态压缩$dp$</li><li>$n \le 100$ =&gt; $O(n^3)$，$floyd，dp，$高斯消元</li><li>$n \le 1000$ =&gt; $O(n^2)$，$O(n^2logn)$，$dp$，二分，朴素版$Dijkstra$、朴素版$Prim$、$Bellman-Ford$</li><li>$n \le 10000$ =&gt; $O(n * \sqrt n)$，块状链表、分块、莫队</li><li>$n \le 100000$ =&gt; $O(nlogn)$ =&gt; 各种$sort$，线段树、树状数组、$set/map$、$heap$、拓扑排序、$dijkstra+heap$、$prim+heap$、$Kruskal$、$spfa$、求凸包、求半平面交、二分、$CDQ$分治、整体二分、后缀数组、树链剖分、动态树</li><li>$n \le 1000000$ =&gt; $O(n)$, 以及常数较小的 $O(nlogn)$ 算法 =&gt; 单调队列、 $hash$、双指针扫描、$BFS$、并查集，$kmp$、$AC$自动机，常数比较大的 $O(nlogn)$ 的做法：$sort$、树状数组、$heap$、$dijkstra$、$spfa$</li><li>$n \le 10000000$ =&gt; $O(n)$，双指针扫描、$kmp$、$AC$自动机、线性筛素数</li><li>$n \le 10^9$ =&gt; $O(\sqrt n)$，判断质数</li><li>$n \le 10^{18}$ =&gt; $O(logn)$，最大公约数，快速幂，数位$DP$</li><li>$n \le 10^{1000}$ =&gt; $O((logn)^2)$，高精度加减乘除</li><li>$n \le 10^{100000}$ =&gt; $O(logk \times loglogk)，k$表示位数，高精度加减、$FFT/NTT$</li></ol><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>对于空间复杂度</p><p>$int ~ =~4 ~ Byte$</p><p>$char ~ =~1 ~ Byte$</p><p>$long~ long ~ =~8 ~ Byte$</p><p>$float ~ =~4 ~ Byte$</p><p>$double ~ =~8 ~ Byte$</p><p>$64MB = 6\times 2^{20}Byte = 6.4 \times 10^{7} Byte$</p><p>可以开 $1.6 \times 10^{7}$ 个 $int$</p><h2 id="数据量对于输入输出的影响"><a href="#数据量对于输入输出的影响" class="headerlink" title="数据量对于输入输出的影响"></a>数据量对于输入输出的影响</h2><p>$n &lt; 10^5$ 时，用  $scanf,printf,cin,cout$ 差不多</p><p>$n \ge 10^5$ 时，用 $scanf,printf$</p><p>如果想用 $cin, cout$，需要关闭同步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointer</title>
      <link href="/post/320468a8.html"/>
      <url>/post/320468a8.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>base64编码</title>
      <link href="/post/e4aae5e6.html"/>
      <url>/post/e4aae5e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Base64-编码"><a href="#Base64-编码" class="headerlink" title="$Base64$ 编码"></a>$Base64$ 编码</h1><p><a href="https://en.wikipedia.org/wiki/Base64">Wiki</a></p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121092628109.png" alt="base64编码表"></p><p>$Base64$ 用 $6$ 位表示</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121091417546.png" alt=""></p><p>将  $echo$ “$HelloWorld$” 的结果作为 $Base64$ 命令的输入来执行一个 $Base64$ 编码操作</p><h2 id="编码的原理和过程"><a href="#编码的原理和过程" class="headerlink" title="编码的原理和过程"></a>编码的原理和过程</h2><h4 id="1-转换编码对象为二进制"><a href="#1-转换编码对象为二进制" class="headerlink" title="1.转换编码对象为二进制"></a>1.转换编码对象为二进制</h4><p>$H：01001000$</p><p>$e：01100101$</p><p>$l：01101100$</p><p>$l：01101100$</p><p>$o：01101111$</p><p>$W：01010111$</p><p>$o：01101111$</p><p>$r：01110010$</p><p>$l：01101100$</p><p>$d：01100100$</p><p>$\n：00001010$$</p><p>再将二进制位从左往右排列，得到字符串的二进制表示</p><h4 id="2-把二进制的字符串按照每六位一组来分组"><a href="#2-把二进制的字符串按照每六位一组来分组" class="headerlink" title="2.把二进制的字符串按照每六位一组来分组"></a>2.把二进制的字符串按照每六位一组来分组</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121091749052.png" alt=""></p><p>如果最后一组二进制位不足 $6$ 位，用 $0$ 来补齐</p><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121091857123.png" alt=""></p><h4 id="3-把每一组的二进制位转换成十进制的数字并映射"><a href="#3-把每一组的二进制位转换成十进制的数字并映射" class="headerlink" title="3.把每一组的二进制位转换成十进制的数字并映射"></a>3.把每一组的二进制位转换成十进制的数字并映射</h4><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121092008188.png" alt=""></p><p>就得到了编码之后的结果</p><p>$SGVsbG9Xb3JsZAo$</p><p>但是需要注意的是，$\textcolor{red}{编码之后的长度必须为 4 的倍数}$</p><p>如果不是的话，需要在结尾的位置用 $=$ 来补齐。</p><p>因此，结果为</p><p>$SGVsbG9Xb3JsZAo=$</p><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p><img src="https://typora-birdy.oss-cn-guangzhou.aliyuncs.com/image-20240121092530681.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/modify.css"/>
      <url>/css/modify.css</url>
      
        <content type="html"><![CDATA[#page-header,#page-header:before {  background: transparent !important;}#page-header.post-bg,#page-header.not-home-page {  height: 280px !important;}#page-header #post-info {  bottom: 40px !important;}#page-header #page-site-info {  top: 140px !important;}@media screen and (max-width: 768px) {  #page-header.not-home-page {    height: 200px !important;  }  #page-header #post-info {    bottom: 10px !important;  }  #page-header #page-site-info {    top: 100px !important;  }}.top-img {  height: 250px;  margin: -50px -40px 50px;  border-top-left-radius: inherit;  border-top-right-radius: inherit;  background-position: center center;  background-size: cover;  -webkit-transition: all 0.3s;  -moz-transition: all 0.3s;  -o-transition: all 0.3s;  -ms-transition: all 0.3s;  transition: all 0.3s;}@media screen and (max-width: 768px) {  .top-img {    height: 230px;    margin: -36px -14px 36px;  }}[data-theme='dark'] .top-img {  filter: brightness(0.8);}#footer:before {  background-color: rgba(255,255,255,0.5);}[data-theme='dark'] #footer:before {  background-color: rgba(0,0,0,0.5);}#footer-wrap,#footer-wrap a {  color: #111;  -webkit-transition: unset;  -moz-transition: unset;  -o-transition: unset;  -ms-transition: unset;  transition: unset;}[data-theme='dark'] #footer-wrap,[data-theme='dark'] #footer-wrap a {  color: var(--light-grey);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/modify.js"/>
      <url>/js/modify.js</url>
      
        <content type="html"><![CDATA['use strict';const cheerio = require('cheerio');/** * 在页面插入新顶部图 * @param {cheerio.Root} $ Root */function insertTopImg($) {    let header = $('#page-header');    if (header.length === 0) return;    let background = header.css('background-image');    if (!background) return;    $('#post, #page, #archive, #tag, #category').prepend(`<div class="top-img" style="background-image: ${background};"></div>`);}hexo.extend.filter.register('after_render:html', function(str, data) {    let $ = cheerio.load(str, {        decodeEntities: false    });    insertTopImg($);    return $.html();});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/background.css"/>
      <url>/css/background.css</url>
      
        <content type="html"><![CDATA[/* 文章页背景 */.layout_post > #post {/* 以下代表透明度为0.7 可以自行修改*/background: rgba(255, 255, 255, 0.9);}/* 所有页面背景 */#aside_content .card-widget,#recent-posts > .recent-post-item,.layout_page > div:first-child:not(.recent-posts),.layout_post > #page,.layout_post > #post,.read-mode .layout_post > #post {/* 以下代表透明度为0.7 */background: rgba(255, 255, 255, 0.9);}/*侧边卡片的透明度 */:root {--card-bg: rgba(255, 255, 255, 0.9);}/* 页脚透明 */#footer {/* 以下代表透明度为0.7 */background: rgba(255, 255, 255, 0.9);}]]></content>
      
    </entry>
    
    
  
</search>
